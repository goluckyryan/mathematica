(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    139439,       2753]
NotebookOptionsPosition[    137576,       2690]
NotebookOutlinePosition[    137922,       2705]
CellTagsIndexPosition[    137879,       2702]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Day and Night time", "Title",
 CellChangeTimes->{{3.4975906695271616`*^9, 3.4975906944585876`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"a", " ", "plane", " ", "making", " ", "angle", " ", "\[Alpha]"}], 
   " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Sin", "[", "\[Theta]", "]"}], 
     RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
     RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "+", 
    RowBox[{
     RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
     RowBox[{"Sin", "[", "\[Alpha]", "]"}]}]}], "\[Equal]", "0"}]}]], "Input",
 CellChangeTimes->{{3.4975907226822023`*^9, 3.4975908091671486`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", "\[Theta]", "]"}], 
      RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
      RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "+", 
     RowBox[{
      RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
      RowBox[{"Sin", "[", "\[Alpha]", "]"}]}]}], "\[Equal]", "0"}], ",", 
   "\[Phi]"}], "]"}]], "Input",
 CellChangeTimes->{{3.497590821057829*^9, 3.497590837736783*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "::", "\<\"ifun\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Inverse functions are being \
used by \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(Solve\\), \\\"MT\\\"]\\)\
\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\", so some solutions may not be found; \
use Reduce for complete solution information.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\
\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/Solve/ifun\\\", \
ButtonNote -> \\\"Solve::ifun\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.497590839223868*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Phi]", "\[Rule]", 
     RowBox[{"-", 
      RowBox[{"ArcCos", "[", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Cot", "[", "\[Theta]", "]"}]}], " ", 
        RowBox[{"Tan", "[", "\[Alpha]", "]"}]}], "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Phi]", "\[Rule]", 
     RowBox[{"ArcCos", "[", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Cot", "[", "\[Theta]", "]"}]}], " ", 
       RowBox[{"Tan", "[", "\[Alpha]", "]"}]}], "]"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.497590839225868*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"ArcCos", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cot", "[", "\[Theta]", "]"}]}], " ", 
     RowBox[{"Tan", "[", "\[Alpha]", "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", ",", "0", ",", 
     FractionBox["\[Pi]", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "0", ",", "\[Pi]"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4975908525166283`*^9, 3.497590913073092*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
QXG+YyLpf1769Z8fJfXI6w3zV2Vm75dSPcAuIY7rOcb15GrnUtInyhv0aqwt
jYth/1G+qJHasGaS90HPNG/65u/bf4HNXyivOm9T9YroQtI/yi/uenSoNN6E
/lE+4rvGzjTlfNI/ytstXXS3+84c0j/KTxuk1n9qUgbpH+U7NW+dII37oH+U
//EwKnCyOJ70/2XgqPhybRa3ws5jPu2n6WonzZNg/kJcmeB15+n+26UU96H8
TPvHP6T9BHpGedV+akaqQ4pJzyh/ppdtnDSfAD2jfDf1zWXZdgWkZ5TvNjM4
UKoH6BnlZyb4P7ENyyQ9k3/idfamNE6HnlG+fdsp8RdtfpOeC1zvfPCSlIce
MD9ifh8aVNJHah8w/yLO3fJmapDpSJaXQPm3G4e1keaLoDeU9/t6+a323GLS
G8qvuWymKu3/0BvKjzkzJ2/Ns1zSG8orunb/IM2rQD+NH3R+0k7C5eWHX3Hy
d8vsLhK7BPkRX3eZdGv7/W6lNO+j/KbF/Wsr68374Hsz44ZI81qQv1/5/qs3
JFz+vZOG1p7iJX6LfLwPf2b0itLR0vrRXqy/RKhc15l3W4Hmfax3jCptq98l
WJHiaKwTNWsQp8e3Y+sp8B/Mtt+dIp1/oR/4A19iYnusFLF1B8zv/JRe3aQc
8xfsuXiVi9LohAKaFyiOiNCtluY3VNWj/bK0kzh1tUEvpf3LwfbZzKFLlfnd
Wt5zDCX/7qWZv1U6/uYVa3Yrk8S5DZpYtHFzyhf+XyHXaZ5Kj5ezlflLYw5W
f3Iv5N76OJrYfK3iFr7f2WxSeDEX7lWXbTu+mLhoiHcfz+eFXNr7ZT+LWpUS
/3xv3cK1w7M51C971nEdtl++4/k7h0P94B8a7njbemsqBzll/y6xS7NNc+ye
ZAn1ZhOvatbQzNwmmdork0uJP/fz27tOhtmchdetzQ0vpRK3+rTK+M/QZEEv
XwV5VXijN+Nbep7I4xqWN2r73esep6L9651niiqvx527mmVbQnyPaPi4u5J+
0aRterVmSg332nNmSufuX4iHDd0YG+6iwoNrqlSqV0vsR+faJSvCCxX4997v
5wV7/hb+XyL3wCO/j8hYlTi+1+dGOTpDWinxDu87LPN3+cON3tP0nNS+Hj26
O1htnSpxfMdfPw0GGDoo8VmfY3tm+OVysvryuF735usrOKkSx/eNfKSxRKen
En33rmNG+Ej9gsnjZ3WblaXAGzmNLjluX0R85o5JjkvUVHnrq/dTehiWCHot
4Tbfbb3mwQkV4jK5yrj2+5K2rWyswKM/gAdwAY/PTFak8ugnFcPDzzfrUsC1
6PFDWfV0ASeTt4YbtC80TKm8gPoJ+KvLXWq+W+dzkBPcqTYqKiQpm/onuF5d
o4UxaX84vBc8/9VUhY5jf3HQj+z9Ir5TRObdvQnp1G/BU02qrqXqpFB59MPt
oV3WRYZ+I/lR/nZu9jTNHzEcvpdMXkW+2tzaUy/9D/Vz8NI/iXebN06m8ui3
05/8anFm+jfuilXVuFdqWVR+SYt2S25afOPQf2TtU+YNXW1ztXoxOwAeadgq
S+1nMpVH/587+5Lhdy5W+N7JVH6C27KNN0u/Cf37Beeao/f1cY0KvzOxzTG7
g8XU/8GzH7scjn2eQxzjqOtpyz9X98RzvZ6s29I1xJc71ufwS6sINb5XJ9ee
G93KiMvGWTinbtxsy8aIKrLD5Xrh9sMlT/jnqB/x3bDcJP1Dhkpkn2uPtV2Z
0S2RyqO9sMNJdiK392OUeegHfN33mQahk1UpLnM/HW3QT/JEPfgusNu7Rpnk
mvgyu0r2PNbxo6GbKsVliv7eOeskT9SD/gM7f8vFZ9Si9cwOg193OKw/ZLYq
5SdHTOnybf73on/isoWHD74qvFjyD8e466SwtME7XwVe9p3YeFydq+bX/KUy
lcd4zLxp1y28eR7FBZ9el6Uon60hPxZ+7+6Ljguan2brJhh3mI9KP7Wt3Dvx
B40X+IFXCmOMbQOSyQ+8khY7KcCe+TnQA8ov7bLTtfUgNo7gR03x6+Jb0zKZ
/Ki3XS34IYbM38B3QXnXoKhB5mZsvMBvKezUyDHUNoXGC/i8M1P6JnnEUH+G
v7GnbnfIxafp1D/X717a7XAK8zdoP4DQz7N8RRekfgXiZc/oujvbXcr+id91
wjvNjHdnfi/lUVX3j14xnq2PoJ/PsKwZrKDD1i8wjmTPa1y/PT3LFj0XUb4F
48vy6S4Vab4F8yDmqVKlQV59jyvx4JinJlTdmvBjowKta8N+/mo2f7E0LwS/
HXbPdXjOTWneCf4M7FWPvkPTpHkw1A+7EXBxSPe+vZjfCPszLFtDR5rfw/wL
fd53r1nYKaqA7EbXCWMftbypzhdYDnhiEFZA/i38MbV5L6+dGK1E+Xz4dWUp
3S4++K5M6w7w6x5lnnzYdboKrV8gPyOK0ejYZBFb70C+Zf21ls86d2LrC+A3
Lz05fEFNhfI5yKtMKu42UbqvBvUjr6ISO7swZmQNxeng7RskaBuaKpAdkF8f
xziV5+hv4G2Ep8zfLSfeXnhCP/DzL+mtfN6wcxLpE/65q6man9fidJoX0K/8
H7RL2+WozMv6UwT5RSsu7qoJC1TkZX5MLPU3jctZjW0LVYijv1lEfix2ClLk
Zf7ND+ItzdViZ7ZX5jFPwV+K3RxjN2qRKnH4S+s7PL95a4oSDz8Q3GvD5XCP
w8o85lP4UauCbJfob1AlDj/q6LTKVNvZSjz8T/B2V56bO+1T5jHvw7+yuxmQ
GWKhShx+VInihD4T3iuSXw1un6mbPFBRmfwu+Fdbl+1P2NdDkTjs9sVPVSMt
59aRnwPe+uDmYSHDRVReZv/Kueem94ba61eR/wPetTKzcp24ShhXYuJjp4m/
NF7M3ivTRyW3qv3X5Qc6iOm94H1UHmwyCC+j+sG1bP2ubxlfRnEBuFOSv43m
2VLBPygjHj6+d4DFsSKSB9xq0QDtoOIsDv0EduNrvw9tfnh+p34I+9Aq5syT
j0nJZDfQP186h+tmPxTxiAfBU+d/HyfNW6I88tLtb2zP3GutRPYTdjVl4SHn
Gsl4gf1B+c5Tdnf+0J3Ffejnte3m5krXE2H34LcUNUtzDnukQvEg+vP9/BGR
0vVQ2E/0z8FqZ/6ut8Leor9lX7SYJ13PxfeCnYlp8U0/PFSJx/dCv5rc5/nj
HZJ4AfYcXM8hx1i6vozyqMfkjuibRpwK+Q/oJ5sc3Gqn36/hwJFHTdvx0Nh8
oQKP74vyLtpzFG9dr6O8Inj6+Ziw409FVB71HLaa+uZMqRJxxL9dtoQNWBuc
Sv424sejV+JO352VSXEi5qMotYzEp8uzicOv8DYbuXeUYzr51fDnGy/s9tSx
TTr5CfDDtWaUb9zjlUcceRv3pP2BdfdZvIn5ztY3YbxRYBZxyv8EvN8VIEon
fxv1exs3PtRzWDr5G/DPX6zYMVdhbiFx2OdX38/YnG9ZwMFOkp/fZeSbj8ty
iKOeDheLS3Y0TaV+C/98gfNgnZWHxMRh54+37xDav4eYgz3HuLMwa7NjTIdC
4qgnTLdoVnxiJs3v8Jf8I8qNQ4f+pPGIfEvvaoWrT/unU/7nRMT3lvo31f/x
Z1C+lbpoV8+2pVT+SsKJWfvvXSM/Cv0Qfuz52oK4U1uTaB68tmN3ySppvkL4
g/GC/qNpdmb62eg4mn/z1BZ/PSbhKI92wX/o2sDXw3yWIo/+DHvl0Pxnpzdv
C0gP+F5xe/3H/uyQTXqg/STnt4/d3ozl36DnXbzvaem6Le0jFexb/sCrnaXr
17BL8H+sxKUmFRK7hO8C/8ei5EL5cHUVmk8h/7vpG+f6tlGl+RH+j7+h6nL3
Fao038H/OaPz7snX1aoU78D+lEdM7VJRJqJ5Df6PWnODwba9WD2wM6euZy9s
fLeW5hH4Ocub6eafCFYg+wP7oGod2evtliqaR8Aj1qdPzr5YTfOIvJ8j0wvz
c3Tl9kliXJg46OfOc0yk8YLv9TbI4r7YOI7yjejnUaGu4g2iNNIzvuPBFPfl
afaJFNdAD2X+18p2dlAgPUBver0a/BpnoUh+I+13PTsuMKSwjvIe0Fv3kVXR
nuMVqDz6beiSrlVjuqXTe2HHSp6/2Dohk+WZYWf48sXrpBztRbwz7drEmYvS
M6hdGL/q1orforLyyA9EvOw+fZjGzu01xNGvju1MTMj4U0v+JOLiipdTLo8T
1xFHf1MNVJm5I19Efjji36yt5U0WjGQc/fDy/RdFL2wVyK+GPt+99e0kzcci
Lwq99e3fW1Oav8V3hPzOv8f6SPfxwq7CzzR29bjktpqtC0P+ca2aO0j3S8P+
w59s1cqidMZWBfJ7Me+Xaz84GHNIRBz1vwpeNapGpY70j3m/m93q5F2qzO9F
/SVqPbepholonMIfULTQUrixTpH6FfzJmFvZG2qC2HiEf/jFR+FowBa2Pxx6
/nNyw4OUevXDv3UePvDV+aas36I/R3ZUG/prqQLVj357MObsbQNjEe/27k6S
SdcwzsCuZ16EfhjZ58bnq8sUun7lZP/+lQuIfBx/R1uD5/PGOV/Pj+XamOxa
tUbyRHkv68Eho18kcs8yD91YLHnqde842b+JBn++6vfqDl1TOFl9KVRea1bB
2gP56ZysvnTO9Ke/w9OmGrye6ER/+2lZ3KGAe3fHSJ4o7zMvcGBc+3zuVZFy
z1LJs8ry25uBkvLTtl0R27yQzKt/38/W2Xf271/RqGsxJ3t/MecyQ/H1zkYa
/BHlHTFuM0q4d7HNTjjPYHmY6J0L7vnlizmZXOJ/uEwutq6Keuy3rWnslc3y
LZBH9mT5FrRrTVjL9Ix9LH8C/cjqY/kQ6PnuqOJwLT2Wr8D3ksnF9jHKvt8d
LlZF7WRw1zvclV2ieJ9Kdf71He24AU/LuNTNj6eMkDztsm86FKlo8AGrzmac
KyzhXppaLboleTb4ODJ9jZYGlR//64P13Z1VnN7AEUey1fdx0KfsO9RxExKi
h/us2cbhu9gXvNTYMkuBL335IV7HeyuH7yv7f0r8oz5XLGI3buHQT2TvV+Zr
h6vrK81259DfZO9X5S9FzN+91tKTQ7sySja+Cd+tzlcnRJ8zuX9Y6GdfuBOD
Pt3tLXnie8n6RwLny/H9nrRPIC5r/x9ukt73b/qSJ7js++VyUd0PHV4meYLL
vlMRF3Ts0pUf+1geD3pb3t5klMWUGs72jK1o2c4dHOpJPT8/v+NllheS6aWQ
i/ms2fTeGhHfaYtN94Bn7hzkUU79+Dt4FcsXyfSezZU1dlOw5BV5J3fx0S++
Wzi0S0/f9NNIM5ZHkvXjVK7llIyCOE1lftSkRVrKeltJP+b2QU+/abB+AvsZ
l2Kz7ma3L//kXX/lvC0y8/xNHHk2nwdRDsHaSf/kVwvc2g9e4sL0CX+j8ZO9
XStMMv7Jo67aGlNyw4/pGfnDI8/NU3mnfOLw9ypfWM7caM/0j7i1jdL90dqG
bPzKxkkZl6OzbVdtF5avg38SsG7P9Ntitr6PelpOj5qf2YRxyFNSbdh2qSX7
johfrjlPP7szmo1rtLe52bkGNU3Zd0Sc8uF6uI+OPxvv0OfArY0qfX6z8Y74
IidvwJagpYzje/lOmrlYpT37jvCfTc31hpytKf1Hz6beDY9PfMTkx/ea82nT
zqQdTE58902Nsl1XT2b9SmZHLnBBzknvMvUuUP3gdpd1ri/5xvx/+BUf93Ta
o70nnMrDf8iyUuRbSp7g8BPW93oUH/WMzQvwiyr7rj7dJpfZf/hRZm2O9Q7W
ZueYkB973mFiVrlJ+T/cxWTosxo1Zrchz6yUkfvialT+kd9N7/ZGpwimZ5nd
Ked6n55nr/u4gjO8vGDc4ZjTwvz0gxt02CbRKVaFH9Zt1qrC1x7CvPiGmxH9
6nP1eTX+XJ1pt3kGeyiOsFmjsrTRnnskJ/Ih156ZrP5c9II46snbW2qZIXnu
L2pX9kFdg/ISbewH2Hx99pXKI98yK6ORkdiazcuQs/qT89ntkufymMiFAxtr
UP7tVjk/Y6TkifKwJyLnFd57JM/nNcOmOErmWfRnw5qKFnvV2HeBvdrm0n1c
pOSpOaAi+5qkPMbLD/fvjpmn2LwMe7jtkYvnPsmze1zbG6ZN2Dj1Sq6dZD6e
7WdDvPDB7mdfhxQ2rpF3mrPjULf+EWy+xvdSDu0xIlry/O10vc+ELHWqx670
2nofWxZXop7o6FL3cLfKf+LHac83Z3YKYvMv9KzV7/wy08GM4/uuUciJu+3K
xgW+b++Vjed+Uvw3Xn5y8M204xmMw46ZD1ftXN6RnffBeC9pYecy3YJxzFM7
w5Lr2j6o+ydeHnSCn7gxnnG8d/x1q2d1wb6kN/i9BmEl/VpJnuTXCf6tr1NO
s7aSJ+0LFfzPL0NvWn67mEoc/ucUMweV9pInOPxPp3MHFtx2Z+MXcV/OpTEd
K2+U/8PN75rtqT7CzotBnldnXxdOf8XGL+RPTRyYlLmfjd9HiSGVbyX+ruyc
K7OTE91yKqo7h1DcPVx0zG9MDxFxxEd9VzkbzXOp5hoI9YPH6c9PDJbERyiP
+EjLu/+ihh2qqDy4wtA2EXEGNdzaP1vebfoexdYvuuv+uenE6kHcVPnSNWa1
XSXVAz65dllTx1tVVA94j0yVrW0a1XAOgn0DD9TbssF5Xy0368Y2GzenBOKN
Xj5LO9NOxDfpOOqBsUUOV/Is4Lb0vKzV0bkuTd+rkR4QR6TpNa7dm1pB8oBv
5gyaZl+tJHnAFzdcWHd6UxXJAx664OWLJnOqSR7w2qhQzymTayjPBm661iq2
anEtBznBC/600Zl+TIH8B/A1e/uWt9dUIvkR7/T7cdGixxYmP7juqlr7Zb8q
SH7wusEtsu+ZVZL8dD7U2aHzmMuVJD94jF2/BtU6VSQ/uIFztOa241VcR5OR
hY9r2PnWTxl879Ru1dQu8O2lhr76ATW0nwH8jrN/qcmLWuon8udA0S55jnbJ
c7RLnqNd8hztkudolzxHu+TXudAuee7hceHZHMt/z5+ivbTf1T1lwcfwcmov
eKOMPcP3LCmn9oIb6q5+yquUU3tpP21ux13XfcXUXvDZpdP9KnuKqb3gSnl3
fNdcK6P2gi9aabmpabsyai+42t7Nt8NOl1B7wbfmpt9+tK2Y2kv1HL4Ssk+r
iNqLfarjjdYHOc1n7QW/22bWMc0TYmov+IdxXQNnvSmj9oKvKg//k5peSu0F
H7DrbZeLRSUkP+3L1YhbU9A1j+QHP7Zziovr7AySP2idbid9Cd/Wu8/2hn5x
JD/2iw463jRqW4KY5AdPnN3mmPfhMpIfXG9P/11mQ0pJnu1r44Y9k/APf/ed
PqX6kc/X/2gzKkOf1Q+e2/tu+sdWpVQ/+AH9Zl3nJzE9I3843HHg3KjoUqoH
fO7AHm/Nx7PylAcO2uexuKKQuOwZwdnazrc6d4/NI70tHMql89Xuyj8nt/tW
U/kT3XJDpPPnuswNeh36s/lCTcgvzVmpPmnIJTZfyJ7J3B3NMRt6WbP62/QO
WCedb4vvBTbLWcHmiz1C3snj46/LLmlsvijPGrxb6sdl+l3c/+lODckz4cTN
Np8l8/KuU3xdfTuPfJ3fimFr1n5hdv7punJdqX8Xau024WgOs/OuQp7qRmzt
hE3mNdTfZM98bkjx7xCzbGbP8d6Tzr6ZPkqK1K79bfZVSPPHuxRPWta328gT
7vR37HOjgtm32opohZ6SeG7jrnVzo48zu411sYiVXqYT51WRPMu/t2+wQOJn
vp90v19fG2aH8d4LMXNXbh5WS/0f7x20v8rgZXum/y++DnFSP2V/t07W9e0w
8t53PUednGzK5OQ2BSdK/c3PFzqZaKxidhL1tNN6nr38ArOTqKdc3674iEMl
jTteqGf/qTm9bpyoou8oq6+aW+cWurC+ncQ6y1Vu784ED2Yn3Wu9Q1dK/OGI
kLN9bJ3LSR7U09Wl45xovVKSB/XkXOveVSO5hN475VznY/Mkfub5uc5X69sr
5L0rx5dXHn3N7NULdye/o5J4/MgVq6WLzMT0XtQz+mb2hR2b8qn+iCZbjYdL
4lmdyms/V2Sy8Y78udXMxM8NvzB7ItOTAn/+7LtdRpH17Mnn1w6jJfX8+bsf
NYrqz5yS2+OrJC6+NuhQdPFAVj/y8E97ZI39vpLZk3Mvm9zIk8T7sw7tcG/5
uZjq0Tgyu/ViSRw9zMaYjy9g9gTrFxnv3QaU1TB70uNbhLq4nRp/e31bw9b+
RVTeS9iPsVzYj4H33hh+09hCEpdwGoohlfHMT3N+ax4rjePLlCY4tJ5aTf3/
j9z5YvAMgZ8QOMaF9aXGP6X5iV9pLUaPua1CfINgf9J6HxmW1kmZ3vvQYXag
NK/g2aXsq2Ij5v8g7z1IYm0HRSnwmDeNlzVfIs1P6HnUOpWkMg47oNXhs/Ld
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
   "], {{
     {EdgeForm[None], GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
guAktS+EDxK8V+3ryjp2j9A14NDz2prnW8F7ss9jYDa9tVX/T8n6FXl+V9Ai
NNkkm7aeCbqDtqCxG4UvxB7AvhK8KfkdsX/gH/gFm/+JsBfX0Tzzk21RdP3D
yXoN/XZXtgw9ARshex7mq5B92E2V9277ynu5m9qvnJfaRuxf2JHta9uSp6J3
1Ld70BI25H0hA7+rrAOfEHwyWSdeI/hUslwcxbvqvktLy44fBTdWW0rtDXiV
fsFnNO5B/d8Z/am+U8IeezZZV2D3blL6fLneS3A5+DFZd6+gtoA9CBqAFppn
67yX2WPsanhb8BjBPWMN6DT8TXQcunGmRUPRV/91UvtK+LeF7RD09Nxkm7Nv
sq/zdmH5OzH0CDyCr/lW8NHdYS8dmOyfvVNYF2LzYfsdFDz+bmHdc2tt3n9Q
i5is/7oKPzhZZ3QJvhxX2lfakfNOlpN94kyWKe0ndI1zPEr4nsk21Kg4H/aN
M+McsGeOhu9rjx9amwZS3Ds/9ml47TPmPnyDzzRXQ/XX2uOuyfYk5865oF/3
Fj4hmd97Ce6QrFOwGc7Q/+1L+0SPxR735BySdcfiyvJpUcix40J2bRz+Ez4J
ez1F4/cWPFTwNf03HhmLr5bslxyW7K8skY2ac3yybOkpuFNpfuFs8Ns+L7y/
O+m/zQQ/TLYBXol93lHXbQRXzdan6Hnk153Jsm5/wZ3R8XrOr8lyGfn8fG3/
DxnLWT5SWg+9VlhuswZ497nSthG0+2LtM0KmrZ/NI8i0VWv7xHdW3iP2Cn27
Re19mF7Zt8fHR79vn2yPDxM8M+j5j6DlP4OekavIENb6ePD34cybbKNCV8iv
vwqfMTKS+x4T3Kn2Gk5kXeGT4psiLxn7uOA3lWlvjuDjyTb8kYJb1T6jGeq/
pzY93Cb4gdr6wq+sfUbwArb6LrGHYwrLZuTqzMrzMj9+8tzQQfjpV9V+L2Tk
U6VtNWQEPj26domerT0e+3yvZHyI9rk1Npfasbq+v/Z9rwt+rjErwRvZshrb
tjs6t7SM4/rUkJn4XfjTP0OHaqfVhvhs74QMR5Z3DtnLnqP/q1gbZ1SWfjf0
+S/BC8jAt4NOZic/i/08K9ufuFxwTvKzkFHI8R8Ljzs5bKq24Zd8X/ga+Yic
/CrZP34r3n14tmyelW1nraH+poLXYZsKv1BwSm377dXaNjy+dwuNuVKwmVpD
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
Aw9YIrA=
         "]], Polygon3DBox[CompressedData["
1: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
Yu+BHNVhALFAXQabT419epkcwFzAeHqj/oTrV+36jyrHu7FiqjZ4T90zKP5r
aRtC/73YzzfZ08aTjTr/emWb++mD9EXmJ2K9x4rg1Wc8l8Y2ZL06e1x/90i3
HybXX7q3kS3RX6S/J2MXRXZDf6oJXhe3r1EHw4sBxSRHoo+jf9cymG8E+oLi
T/Svuj26ELIO+jfIvnX2sLnWQXX29oF1zsLNyCrohzeJDU+7x9BXRl4rgjHE
P3/p/9HvpO189D+bYOcpkS/QZ+UeK9D3HrKTsR1ZHv1dfSL6wXXOxi3IanXO
nLniAXXO4q+evzJz9AH6YrRvhP49MtC5rIN1TsWeGv0QY06RPXAF+rJN5vL4
InjretoGlJkv8bKYW+x9QhF8NqjOWb8JWalOTDY2b1UHz7nn+9Xx/56FvZFD
i/jy69rEdGP7PMgZdTCT2Mk9cyf6YU3wrHhwYTEW6/iO+xf5uUpOZW51RHfG
XkPeFO97ptFfRV4og5nETuaQ5pKPIi+iP4V8ZLzDfl0/xTP9Xgb7im8Gcc1g
zyptPbDXde+UyRE/7GLAhfxfokxsuFY8ym8dwjV7Ye/ZRJ8a6Ym+ap3frnxm
9K2a5Ofm6Xdw7WN1sMFpyP11fLK++TL3MPppyKzoK9HWp04+vGeRZ3qpTp5j
vjOmjL/3/NxH/43Yz9Y5Q56lAWJZfvtbZBPs0Yx5BX2k7yOuwV4KewWfEf0v
5LA6z7cy+v3uiTr7w1yql/wA459BWux+Zfb3KPdYmTVxbXxG51A8+1wTHzPe
15TBY4s08U/mLg/zLN9hb1om5/Q8L9/Glz3imery5Q89Kx3+FU9sZfxj7CPo
CzVd7lAkHzOf3YyxBxfJf91T43ONzp8aL527r7HvEzNhH4+9uXl4k/N9VJFn
9Fl/EGO4n2h7E32/NlzIolx3S5s97l4Xv0zXnQX3qnvSvekZ96zPgX268Zd7
rFfknd5uwi94NszxzfXF8GJ5Y+gp6OfUOQtiIDG18VRuRE5BbuHhLvebD/tb
80Nk4yIcz+LuhSa/f5bXo9/YxNecqQ9osifdm/92DtHvbeIbL/EMNzk/13Lv
/fwd9IFtsPYi6DejP1oltt+gD6qCyd8vgjlmq5OfbFoEE90jtqiDh5Yv45+2
bsKFfOAZRb+lyfVifHMH8Wz/IhjrriZnxrPjMz3pbzXhwsxfLkV/GZlRf4t9
Rbf/5SakG/7TZL33xPiEtrfr5KXmp5+WiZfyHfruAzt8bsw0dspZyDdNxD36
VMGo7sEN6/giMefJ6GWb8+C5eAh9njb+TL82Bn2aOmfdOXAuxD3in4+Q4a5D
k9hmDn9xk/xQrupb5F3POnIq+jmdfzizCXe0O7Ie+i/cY3gZfkqeSowuVt8D
fb46GE+sJ2Z6qA7GXKDOHIs9zWUvKoOpxdaX0n8R95yvCH9zLPbjRbCv/NRl
4j365y/Cz7iec5ZZQ9dSvkmsa863mPG0SW5sDDOWbd/lm2KcEeg7OkfYp2Gf
1eEpsYIxZZ8m/tSz5J52b+9J/1xFcmpza3Gd+M4zIP4bgjRl8KvxVJ9hjmFO
oi+ZGbne+yGbNOFA5UJ3QNZswxnKHTpmFvTZ2vja8ZgJfYD5Gvc+mTFntPGx
+loxzaxt8k/XbiBtm7ThPLcvclblq2Zo8r7GFGPLrU3OqnPoedi1DdcixyTX
tAvSqwgHIxezWxvuSQ5LLktORG5k3jL8mPyauac5u3zO3Mil9M9D2/ptOFO5
U33KOU04aDlE/ece2Du34XrN1c9pw795bzHF40382VxlYtZr6NM3mY+nu/xD
/ClXK+YXf+zQJlbKh5+JvhMyLfZQcTb6G1zfu8wZfgl99zbcnJya3NoebbC4
mFxu770mvu9nMQP2Pm2wq5hT7CkfNWUdTkFuYVST3NNn1v/+0SSXF8OJ5eSn
zaXEjOM6/yufsW8RPFLViTXGHHmrL5vkYmI+sd9adXhSMZ/YrxFvo69fJl8z
p5fXl5M31zdPM19r9c/oMzfxXWd38USfcUcdvKQvMW8d0uEleTTxlmOPQSai
v69zWoXDX9W5pf/gMhhA/2e+JxdljDU/Fk8be2/t/JU5qLnoJa6BZxcZXIYj
kCsw//Rdeovx0ddGXjXeYm/aJh8bU+QZfBbzA7m7d7rn37sNNycGEYuYs5m7
6TMr7J5tftucydxprzZcmZzeJd1eNRcXE1kf8PcPqRJT50L/WvxdhDOUO3R9
5SbXr8LXiPfOK8PxyfXNhd2zSFuPbj9dWwRjyS2bPxr7d+H6tdA3RGZEP8b5
a4I/eqPXdfgEc0xzTfeweEHO0FrKplX4P8+IZ8U583k3aJLPmdeZv5jvGUeM
J6824UvNe8TsYnfzYXG+eP+BJjm8ubz5mNzIbnVy59X1Iei71+GK1kDmrsMZ
yuHJh8vnGheMD2vqMzpMI7axZmDtQB5CPqIvMr9jq+St5q/m4l9gz14nf5Ur
Muc3rxJDiCXECGIFa0jWkuQnfRY5cLnwa7ozIL+n77gVe3nfGXudJvylzyaH
Lpcuh2cc1KfqW/WZf1bxOfpS8brcjTFjSOdPxRbrdvhn6zpcnznXB1XyxZF1
8Ii1IM+bsdrzfjT6dnW4VGsYPdCfrIKzjQHGggF1uFVrFD3FC22wnbUd+U45
fPeyOd+HXDu6CfYUE4nvnCP5m6+qzN1+3dqa0y3e7SnPvP7GvXa/e6DINeIz
OS25LX289RPrU9aI5EzlTj3TYhFzZs+69Qt9mPHaeoj+Ruw6tsNL8lEnYX+G
zNfmHXwXMdonXXz4bxXMZe3S87ax+BD5u0mNy1qXmOSsJpyA3IBj5O/FN2IT
Mb/YX/wm1v9ndz85HrkYcxLrVdYArAUMKuMkzTvNP+VQ3q/CMYuLxccXNoln
q4u7i/B18odiI2tszzbx1+Yu+mR9s9evI8Yrwl377GJrbetxxiNjoTmAuYDr
b52rVxff9R/mjnKM+3fv/486nJf4/Bf3XBmO1nqAeMszJWd/cpMz4V7/uspZ
kXeSf5Lz6FXnDDoX31Q5m+7R5Tv8KLfoGfG3vqtydm5uguXlNMT3GyK7FKmx
ftHFJ2uu5nDmcvs2yW23QH5sgs+WKvPMPrsYT6wn3ymf6xjHyvEO7K63liJn
an5sPjG8DkYTq8lZyF3Ij57exOfI937W+SI5FrkW+dLhTfgfuU6fQX7DmC2X
ZU3JWO4ecC9YQ5bPMV5Y2z6pi1fWYMznHq1Tm5mxCb74V4fPrMmJZd/s8IT4
/eEi50M+YThtS9TJn+Q35X/dS3JMck3WgK0FjyzCZxzD+B/KxHRjuzVEc+s3
OjzmGfOsvdXhFTlE8cvLHZ6SfzLXkpO6o8qZ8+xZw5QvtsZm/Hutw3vye+Yq
cibWAq3Bi8+e7/CzNUjj6+sdXnxEf419fbdHrI/L5ZiTywNaX7B2IQeyWR2O
Tl/9eYefTvcZ6nD+cv/6Zu+1BfJgFT+uPz+/izejqsSKC7t4Yn3HuXJP+n2C
flx/fkEXj+QglrS/wwPW7KxPvdfFe2tk1vbe7fC9/IpcnPtXfsfvA6z1iOet
F4jn9d3DOrz+mXu+DIYRy5hjmWsN4f9krkUTfP1Ch0fNn6wtyHk+2O0HOTC/
aRiM3rsJ3n6xy0/6NMGnL3X4Vc5cvlDeUH7Z+Rvd5eSHt8lhzWX36vKxOdpw
I57RDbt4eneVNbBeIx9u7cX4Kk98aps5dg4PRd+2Say4h7ahbepJ+nLPmHXb
K5t8C9Kz808bMOapIjVK60XuQbG9NSj3pu8gFndP+W6+o7mYZ8h3b5CVqviM
C/itYW04B5/hsDb1Kd/VNvvk2OTarDdbW/QZfVbxhfWk28RVRfzh/+OL27s2
+fXT2pwLz4d8v/y53PuyyHVV+NMRXTy4vkp9y/03qpurLZv4Qu/hvfQB5mrm
nPoG+Vi5EPHADVUwtFhaDt980zNlbjp5kbNmPeWUMjUs+Y3j2+SKEzapD/Zu
8+3DmCJ4Vmxk7W21InV+95i5jzmfe08+Wq7H9/W9N6Z/uio1C/GmZ856hnvI
vSQnJzf3epH64hLG4zLfdJhfy+fJxRhTHqpS75fvFA/4PcC1VeZueBdf3H9y
09ZMrZ36Dr7L4Cq1T+fEubFGKn7x+yT93dFF6m3yt330LbQt0AbDieX8zUXa
fC/0aZ1n9FldQ9frs249jA3y276j9bO36tRbh3fnT7+v/z+qSH3eeq21ep9h
wTZ7yr2lD7c+Yr3ghG5/+K5yKHIpfjPj9zqD2vhnOY1Lu7UwH5XDNQd3T3re
vuzOk3t4rjr+zb19XTd/fqMi/pi4zrcp4r+r3Qd1vnURL16FfUCbeCNHIldy
YJt4YO7otw/ynRNWmR/rN3JYclm2yX/O1NnWVKyt9G/iC9xLfjtizmvu6zcR
ZzQ5A54F813xrbHVeob8jvVIa0zW/j+pUntapfOvH3f3k7OWu7bGZ71Dvspa
gntefnraOtfro68Ud9epJYhXrqnyzZXfXukvrRc4J86N3yCIn9+sw7X0KMP/
mwNMX+ebBXMDv/8xt5WT89sRc4fLitT476pS73I/eR73b5MTzFDn/uYKclCu
x0R15ns8Z4U9QZ31lnP2m5rZi/C7xnjrG4M6X29NxPeZpM76+E6+mzVz8b1r
6tr6vNNhb9ok17q5m8+t28QecxRzFevbcld+U/NFHZ80Y5376asW786v7+S7
+X2L3zaZg7qe1iysXcjJy3ce3s3vzkW+T7MYJ/a0ZnhPHU5TbvOiDgPJ6cvt
i2HkZ63v62v0u9Y3rR9dUcQf65fN/S4vEn+MQ/8DYyQdvg==
         "]], Polygon3DBox[CompressedData["
1:eJwt00lsTVEAxvFLa6qgKdJQQ7ugikRotREWxoUFkaqEGMozz7OapyBIm6Ii
aRFSDRKNmCINQWKep8ZQCTbE2IXYiJh+J8/i/975/uc799zce25GbGH+goZR
FA1AI2z10yoxil4lRNHGBlE0TC6SE+QabOGSuPtckvENi4fz++XZ/Cv5ILJc
qwc3i6uTD6Ab152by72Rj6AP14ebx72Vq5DN5XATubvydiRxs7hlXJL9miOX
y+O2cC39X+F2u6eB8mZ8l5OxQ6+nPBVPXasMHbh0ayZx9+QdaM71kpegsXVN
kMP11ZvMPdIpQWuuHTeFeyzvRnuuMxfjnsh7kMZ14uZzH+XzGMEN5Z6inXst
t8cvfrZcqPfQuBgpeqncBO6OvK1h/P1M58bhgxyz9jVXLS812VRuhr5cLncb
f42v6Q7h98mLgpML5FvmquQcaz/In/DHPeXK01Crtxcd9TLCWq5evoJxXAl3
Cd+MF1mbjTU6z7g019kp/9RdzE3Hc+NydNHvptMRycYV4fxgvc5GHDauRsw1
TuucRJleKbcL63SOhndi/oR8CBu4OYnxcxLOy2/Mlc/ifTg7OplYrXeGe8fN
lLtgFbcAX6y5iK/mLujM4F7IFejKZXINuFPWPMBp+6fL1/kf5ldweSiVj+El
N0lORZFeQbiXcH7+n6vB8lp+mLwVLVxvJNcftebHc62wXCcVV43HhGdsbqlO
DT4bz+N6hHMuj9dL8d8inG17DZXLwlnVuyoP1tsr5+ON/erkc9iktxBfdS5j
rH6xzkzupbwfmVwWV4lR1tQnxM9wbfhWw73ozEiIP9vwjG/ip3ER1y+8O3l0
ePb/v/3wnQ9KjD+H8Dza6LTFCnse5+q4wrAHVob3i9fWVaK3uWydf4f+kjc=

         "]]}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl09lTT3EYx/HTr0JhppTKmhDZJfv6Q5ZS2hdbpSyhTZJ9zd/jH2CMGTNm
XJgxxuDOhVsXbi3J6+Hi3ftzvs/znPPte86vrHe4eSgjSZJvKMhKkhS/QKGc
zUWcyyWcz6U8nyu4nKu4ktOc5mqu5yPcybV8luu4n99xgQcOylPyiFyMLxix
dt0GmvHe9Vq+hslM+3A9Ji/FKXRhtvmJ6LfR4XiGvAPDev+YWSNfxVzXo1yG
GWZOco2ZM/wYA2YbeRt+mhvTv1quRZ58jBv1L+HLrrfzRTOJezXIW2Kf1lfx
0XhGzOivkUuj1/VWztDfY+y4XIVR6xV8OJ6lfzLOTV6Mc2q/7GWz3GH9Ft/E
Z+v1elfK1fiudogXYUp/n/omuc76DW7VO84fra+Is8FXtd96R+SFOIHTeIR9
au1mHspD6MQCDGKm/X9SH5CXx9m658F4lv56foJydFufFt+JfABvzVzheWjQ
26VeKe+P+6g9iHNFrpkOLsElvImz0p+Wi+O9m9sYe4x7qc3Sf1/uRzuK4qzx
Wm3CXLb63nj/8X+Y3cB7kGU9T889+QLaUIgmM+f5ldpuLoiauUz96+VdyFG7
G+8HLfpb+YeznMN9eKney/lImWsxv07emfr3uSRtZu7I0+N3EfeIbww9eKae
Y71bXoYPZpv4dnw7ak/9ec7jGf9/q38BBIVSTg==
       "]]}, {
      Line3DBox[{1043, 1262, 1263, 1236, 1310, 712, 1311, 1296, 1297, 1367, 
       1286, 1349, 1413, 1480, 1320, 1365}], 
      Line3DBox[{1044, 1125, 1372, 1446, 1180, 1126, 1328, 1006, 1337, 1181, 
       1247, 1264, 1127, 1233, 1471, 1281, 1312, 1282, 1182, 1298, 1350, 1344,
        1412, 1479, 1287, 1363}], 
      Line3DBox[{1046, 1128, 1373, 1447, 1045, 1327, 1374, 1476, 1335, 1183, 
       716, 1237, 1393, 1414, 1330, 1338, 1339, 1184, 1248, 1265, 1468, 1129, 
       1234, 1240, 1266, 1241, 1185, 1299, 1351, 1361}], 
      Line3DBox[{1048, 1130, 1131, 1448, 1047, 1375, 1425, 1049, 1376, 1426, 
       1050, 996, 1331, 1329, 1340, 1051, 1336, 1457, 1186, 1235, 1187, 1052, 
       1300, 1449, 1132, 1288, 1133, 1301, 1053, 1406, 1450, 1268, 1134, 1267,
        1135, 1368, 1269, 1470, 1411}], 
      Line3DBox[{1055, 1377, 1427, 1054, 1378, 1428, 1056, 1379, 1429, 1057, 
       1380, 1430, 1058, 724, 1059, 1477, 1332, 1334, 1333, 1342, 1060, 1451, 
       1136, 1188, 1137, 1061, 1302, 1138, 1289, 1139, 1303, 1458, 1062, 1249,
        1271, 1140, 1270, 1141, 1369, 1272, 1358}], 
      Line3DBox[{1064, 1381, 1431, 1063, 1382, 1432, 1065, 1383, 1433, 1066, 
       1384, 1434, 1067, 1385, 1435, 1068, 769, 1142, 1069, 1452, 1143, 1290, 
       1144, 1070, 1145, 1323, 522, 1473, 1071, 1146, 1189, 311, 1072, 411, 
       1291, 1436, 412, 1073, 312, 1273, 1359}], 
      Line3DBox[{49, 674, 50, 675, 51, 676, 52, 677, 53, 678, 54, 679, 55, 
       680, 56, 681, 57, 682, 58, 683, 59, 393, 60, 954, 394, 61, 955, 395, 
       490, 62, 956, 396, 491, 1366}], 
      Line3DBox[{1075, 1386, 1437, 1074, 1387, 1438, 1076, 1388, 1439, 1077, 
       1394, 1440, 1147, 1078, 1395, 1441, 1148, 1079, 1396, 1442, 1149, 1080,
        780, 1150, 1081, 1151, 1292, 782, 1082, 1152, 1443, 1397, 1083, 1153, 
       1324, 1410, 1478, 1343, 1341, 1084, 1304, 1305, 1293, 1307, 1321, 1306,
        1085, 1250, 1459, 1407, 1190, 1252, 1251, 1086, 1274, 1347, 1356}], 
      Line3DBox[{1088, 739, 1087, 1415, 1107, 1089, 1154, 1416, 1108, 1090, 
       1398, 1417, 1109, 1191, 1399, 1418, 1110, 1192, 1400, 1419, 1111, 1193,
        795, 1112, 1194, 1155, 742, 1195, 1156, 1420, 1113, 1196, 1157, 1198, 
       1405, 1460, 1114, 1197, 1158, 1200, 1242, 1115, 1199, 1253, 1469, 1408,
        1201, 1243, 1116, 1238, 1317, 1352, 1364}], 
      Line3DBox[{1092, 1389, 1444, 1091, 1159, 745, 1093, 1160, 1421, 1117, 
       1202, 1401, 1422, 1118, 1203, 1402, 1423, 1119, 1204, 809, 1206, 1120, 
       1205, 1461, 1161, 1208, 1121, 1207, 1162, 1210, 1390, 1453, 1209, 1163,
        1212, 294, 1211, 447, 500, 993, 295, 1239, 471, 1318, 1357}], 
      Line3DBox[{1095, 1164, 1391, 1454, 1094, 1165, 1392, 1455, 1096, 1166, 
       1214, 750, 1213, 1403, 1424, 1216, 1122, 1215, 821, 1218, 1123, 1217, 
       1462, 1167, 1220, 1124, 1219, 1463, 1168, 1222, 1244, 1245, 1221, 1314,
        1169, 1325, 1246, 1313, 915, 1223, 1254, 1275, 1170, 1280, 1345, 1370,
        1276, 1354}], 
      Line3DBox[{1098, 170, 1456, 1097, 171, 889, 254, 172, 890, 256}], 
      Line3DBox[{1100, 1171, 1172, 1465, 1099, 1173, 1224, 1174, 1466, 1101, 
       1175, 1225, 836, 1102, 1404, 1464, 1226, 1176, 1326, 1315, 1103, 1257, 
       1277, 839, 1227, 1177, 1278, 1258, 1284, 1259, 1346, 1360}], 
      Line3DBox[{1232, 1178, 1228, 1179, 1467, 1104, 334, 1229, 978}], 
      Line3DBox[{1279, 1260, 1316, 1261, 1231, 1285, 1319, 1472, 1409, 1106, 
       1308, 1309, 1295, 1348, 1371, 1475, 1322, 1362}], 
      Line3DBox[{1353, 1294, 1474, 425, 477, 380, 1445, 1230, 335, 1105, 
       462}], Line3DBox[{1355, 1256, 1283, 1255, 363, 176, 361, 896, 262, 454,
        175, 894, 260, 174, 892, 258, 173, 829, 173}]}, {
      Line3DBox[{1017, 1479, 1038, 959, 950, 960, 761, 906, 762, 1414, 998, 
       996, 997, 654, 1430, 723, 660, 1434, 729, 668, 1440, 774, 775, 677, 
       788, 789, 1417, 687, 804, 871, 805, 1422, 697, 818, 880, 819, 1424, 
       882, 829, 891, 830, 893, 1464, 837, 901, 838, 957, 970, 1474, 1040, 
       1032}], Line3DBox[{472, 1318, 160, 225, 1200, 148, 393, 138, 1293, 392,
        130, 1273, 350}], 
      Line3DBox[{1018, 943, 840, 942, 839, 935, 895, 977, 832, 892, 831, 884, 
       821, 881, 820, 698, 1423, 807, 872, 806, 688, 1418, 791, 862, 790, 678,
        777, 776, 1441, 669, 730, 1435, 661, 724, 655, 849, 1004, 1457, 848, 
       1005, 904, 921, 764, 1468, 937, 763, 936, 1027}], 
      Line3DBox[{1019, 1015, 701, 914, 993, 913, 909, 814, 929, 693, 1460, 
       912, 911, 867, 798, 683, 738, 860, 784, 1011, 1478, 1013, 992, 991, 
       855, 773, 1436, 963, 987, 1016, 1034}], 
      Line3DBox[{1020, 969, 983, 968, 956, 965, 974, 966, 1035}], 
      Line3DBox[{264, 1283, 379, 95, 1221, 249, 84, 1207, 233, 71, 1194, 219, 
       56, 209, 1081, 44, 1070, 33, 285, 1061, 24, 435, 910, 851, 1470, 
       1029}], Line3DBox[{587, 1346, 333, 897, 455, 894, 833, 886, 823, 1462, 
       883, 822, 875, 809, 873, 808, 689, 1419, 793, 863, 792, 679, 779, 778, 
       1442, 670, 770, 769, 662, 1000, 1477, 999, 1001, 766, 907, 1449, 405, 
       951, 404, 1351, 613}], 
      Line3DBox[{1021, 903, 949, 985, 948, 1472, 711, 757, 918, 902, 1467, 
       841, 709, 755, 898, 1465, 834, 706, 752, 1456, 826, 702, 748, 1454, 
       815, 694, 744, 1444, 684, 739, 674, 733, 1437, 665, 726, 1431, 657, 
       720, 1427, 651, 717, 1448, 765, 648, 714, 1447, 760, 646, 713, 1446, 
       845, 920, 919, 645, 712, 972, 971, 844, 1033}], 
      Line3DBox[{589, 1347, 353, 442, 441, 955, 801, 908, 469, 1352, 631}], 
      Line3DBox[{1022, 1014, 1041, 981, 843, 1445, 947, 984, 917, 916, 900, 
       836, 708, 754, 890, 828, 704, 750, 879, 817, 696, 1421, 746, 870, 803, 
       686, 1416, 741, 787, 676, 735, 1439, 667, 728, 1433, 659, 722, 1429, 
       653, 719, 1426, 650, 716, 905, 847, 946, 982, 945, 1471, 944, 973, 759,
        1026}], 
      Line3DBox[{576, 1272, 349, 290, 664, 311, 854, 732, 673, 1443, 783, 859,
        737, 682, 797, 866, 743, 1420, 692, 813, 878, 294, 700, 323, 360, 
       1276, 582}], 
      Line3DBox[{1023, 941, 930, 869, 1469, 928, 940, 800, 868, 799, 967, 954,
        964, 786, 861, 785, 939, 927, 1459, 856, 926, 938, 1030}], 
      Line3DBox[{1024, 933, 934, 896, 932, 931, 887, 825, 1463, 885, 824, 876,
        811, 1461, 874, 810, 690, 795, 864, 794, 680, 781, 857, 780, 671, 772,
        1452, 771, 952, 768, 1012, 1451, 767, 852, 924, 925, 850, 1450, 923, 
       922, 1028}], 
      Line3DBox[{1025, 705, 751, 915, 888, 976, 975, 699, 747, 1453, 877, 812,
        691, 742, 865, 796, 681, 736, 858, 782, 672, 731, 988, 953, 1010, 
       1473, 1009, 663, 725, 1002, 990, 853, 962, 1458, 961, 656, 1036}], 
      Line3DBox[{1031, 1480, 1039, 986, 958, 758, 846, 1006, 1007, 647, 1008, 
       995, 1003, 1476, 715, 649, 1425, 718, 652, 1428, 721, 658, 1432, 727, 
       666, 1438, 734, 675, 740, 1415, 685, 802, 745, 695, 816, 1455, 749, 
       703, 827, 889, 753, 707, 835, 1466, 899, 756, 710, 978, 842, 994, 979, 
       980, 989, 1475, 1042, 1037}]}, {}, {}}},
   VertexNormals->CompressedData["
1:eJx0XHk4ldG3VomKBippokmJlFKUykIiJSUqpTIUKkUqChkqVBpMmVWSoWRO
RNjmIfM8c44zm0uikPvp2+59fn7P7Z/z2Lb97bXWu971rr3P11ojixPGM7m4
uIpmc3HNIj7nWwW46anS0YOieN2MTDa8S2zPXDQvABbYXugL2tGP9lXNbt/d
HaIgfSPJysuuFDbcPRRK4e9Ba03VxJ7lt4Kcmqv8n/F8YHYHLw04wUR0ue1l
geVMaJvPaL5Xkwj966yc02t7kJTEZtHgs54KLnr32Vl5LTBYW8ttINqDFG7W
rlkxsxLaud9sXjGjGW69aDr9/mIX8hXk/St7uA2uRQZfKj5YBz+tj+hsNmSj
F9lJVHFLGsz1PmI2nFkK1Unut36KMtGmcW2lDb1MmHlhjKZZlwJV2csP53Jz
0IVU+VvbNj1WOPrygvDbQRpQUPcZt3o2ys+4/GpbTAFY2OkkjJyjAW+bUNDR
c2zE1/7LsC62DsYeun5ST6BCBP9o6MxMFqrV/qArcKEdzEeXBNYeb4cS2+Bj
buIsNHJReEzLqxMq1PKuLWY2wNlF17/kZjGRVvhaVToPAxS1NO5Yzq6Erx8s
MhJnMlFj5CeRygkm/FoWPOfQzDSQH5BKCxmkIQqDuqJX+aFCxg9ZH2LfEDpP
4O0yYvynV4RJuGwOtPd+GJYPZIN+E7/jvZ80pLQ95c5oThU0nv3B992IBSIB
IVtFuOhIXsIzi/KyCQ7x/TJquM0ANZFD5X1r6UhrgLN3nRgFXOPH2G3dnSD7
6cCvDFM6+pt5MMe6pRNu5BZfksvqgNWGvNfHO+ho1rVhB+IT4n24RTYlNkKL
KqQtCWCghpgx34ObmFCxy6Ng5+lK0F8h5HqDzUABUWLKO1ew4MOIsmf+p1R4
eslsIRFnxPtspJCR7KSQE572hcABNNUtpLe0t6CXGoHzctIQuOxdxb/zcQ8I
jC55sXlbK/I2OJIlf6gC9kg6gFh4Nwi9ubH949dWpG34KHiQUw+HHd+4pOzo
gvOls9RiXrShGIvsN8QnDDkfyD+zlw0i+3ZwDqe0o3aF3KycRCoYCctUV31j
QO4CQWHCfqTgpNNP+ANoSpfpk364UP2t//F2Kjq9xO5ywTgDjJXUXfcf7oCC
MF8GEVfEX7jFmIgzfKrdoD8ZX9e6CJ9OPTpKS3fqWWrNggX76/VnoXKQF1N0
jsxlIMrsmXIfD7FA2EeSlk5JBgcv+hsPu1JkSl/v40d3UFA4LjU3eEc/5KlW
aM8IL0XJwgmS/oYZ0HZXkBE30gfCXWHDrevL0PrCWy1t68tg+K1paOWRPkgV
kDmynKscucXdvr/hRR2sP5YiEri1F+K3aLTtOVSBkjKcfxD+A3b4j12TftN6
UrAv90klUtO/NDtLkgoG4k+uv0/iQEmgETeBG7TCPiSKwBGsvfZhbIDAj/fW
mIX3zWrQ94wDmxYbMuHl0kX8Hz7T4XTL7d7a2DrUqpGUTeQH+EfPD53MiyGD
k0CpbkRewg0d3AUcSKXe3Joa2wrHz3/2I/IWhWWl2xJ5DEmJBiqT+TsQseX4
diYVGW1qKAv4wgGpZON7ef3FIH5uiczGCM/0XeVe7zVFHBSKJib/9cPQ/dw/
6Tme6aact2WfP6TDRYlgV/vSfrCre/b49AqvdDOXUjdPgo9esPJHCZ6CB9qi
h/ISvdJvwCW+I+vr4Bvzb97hnX0gJKBvlefrnb7F8JfdJO+IMvxeT+JQ8/vy
3DmNL9PPGSRJX+ahwho1xrHzwt1g9G733D4v3/SvyqocIi+h+Ox7i8l8rHsx
KzNkyD+9dK+jyesQJpThT63i2+bPNIPTi/C8qb/zfnmVKeobki6K1z2Pn7P9
y6u3oafC0kXwPrbiff1a6CfNSIlKn9q3NbZDGtVmLav9lD5lpy22W0UsBLYk
5aZP+eUZ9pMDl+vwJmJfD/BnS2s9v2DnE7AhcQgXp+Ewi8QhfMI47MA4XEzi
ENZMw+EnEofwaBoOo0kcQiLGIQfjUJPEIahiHBpiHBaTOITlGIfrMA49SBxC
P8ahL8bhKRKHMIXDIIzDQRKH4I1xmI5xeIzEIUzhMBnjsJ/EIUzhcAfG4R/x
xua6dhqEbuTXW/uHDc9SFjMLLRLhCcljMJ3H6kkeg+k8tpDkMZjOY0tIHoPp
PKZH8hjEYh77hXlsJcljMJ3Hckgegykeo2MeO0/yGOhiHjPFPJZP8hhM8VgS
5jEXksfgK+axxZjH0s3+6EhfpEPNYRvN6rtsCNy+IHbizRfYTdYpaMd1KgvX
qRCyTsEPXKeouE6dJ+sUAK5TLbhOrSLrFMjhOnUY1ylVsk7BcVynHuM6tYus
UzCO69RdXKdWkXUKpupUyn/WKZiqU424TsV4fjA28qZD5R4J06ADbNggYPzj
j+9XKCV1ApzBOuE41gltpE6AbKwTbmGdMJvUCcCDdcIMZ1InhJE6AcqxTriL
dcI3UifAlE5owzpBl9QJcAzrhGNYJyinr3qQSODd452S7zIxNqwWc2nubP0K
PaSOgg1YR3liHdVP6ijYhXVU93/qKHiKddS9/9RR8AjrKCmso7QnwhhypQxY
F2zbOXaEBSe9q3i3FX8CPlIHgjjWgSewDtxM6kDgwTrQEOvAZBtdft0lTLCW
6JOzX8qCY5fSH7raxsIqUmeCFdaZf7DO7JHjOna3thcdyo8c1r2eDyanPtH0
3Wph99f4TzfOdCNQ17uT+LsVopToWvsPEHFsSBlpXMlGYrtveTp70WGs6vgZ
ibhsmOA+eJmfqxsVN/E45zSkgflPGl2skQKHt3s+e/mXhf4MfHKk1HaCabdO
ke3ZGtiw/eqrNVwstICSlff6FQM+ScR2rhXIh8s3OoyWBzOR2ZdNF50Uk+Bz
wqr1pU5M8Al951XOw0R7D0srGHyjg+8j3Y6G8FpIM+97NnCGiY5nCAv/2sWE
4ezIZ06aBSDREfklWp2G1k1k7/txkAGdZe551gqtYLuscNDtPB2d8Hy/Xtaa
CTnncgqu36mF5Fk5VNtCBlqlkOjAX8WE9eq6ud0e+fBYWoOPP6cR9arW+zpk
dEK845ODSiVMkJjnUur/uBld/U09ML6BAQIam/QKZtNha65gMIvZijzTnu/b
NIcFnJh2DdcOCtzJerE1l5eCqLnseE8VAldPQk63xDdD/FFLasj6TiSZ77Jl
XygbWhizEgQKq+HMTm/lG/10JOR50kSGwLX3KzeTA9k5kPdU/7zxr0xkMdis
/cO/EXzeKLi/Vu8FMVQrnqqVhS6Z3M004++AKP49lLbYbrglOlQybpuN7r1J
SbB50gnJOgkV61M4sHF2F/uUYC4SlbDuzTvMgGvsF5qnL7MgsMNdTlslHyVQ
MmS2Ec9d2z7Sziyig+cRacOJc0Vov/CP1NE6DnysLE7Y30GFtDVppdKsUnTK
qPkGcuiGgEBQszFsg7j3daNaY1Xo/MCyUn/vHjAr+PO+3KEefmTESYnPaES5
ejqjJxJ7QMjc3aB4fjm8CN7Udqc0A24Vyu8orqgCGYUkM70HfZBB2guW2F5f
bO8a0l6Ybq85aS9Mt3cNaS9Mt9ebtBem2/uUtBem2xtP2gvT7Y0i7YUL2N5r
2N4u0l6Ybu+40o2M6CIqiOgs3XvOmKhDFQXe8c5pUG8ZYt16oQ7Uq2fFiYYV
QIpn2mBISC8YrVjrtKW0DtDEvX3vAqqBGWAmx/OqB1RqBakxd+shrDJwROpe
E7iLPN0tK9INYWGb/CMsGiB7Y0d4Xk0HVJ5aaSMkyQFXEs8wHc+bSTzDdDxL
kXgGD4znLoxnaxLP0InxLILxHEfiGbZMw7MuiWeYwrMvxnOHCZfvmzlUUFS6
I7irPx7gftWRvBnd4N6p6dGzggqzvJ1Lvi8pBt1N5p/yNLsg/wVTzVaZCuOi
uWonjGqh53Xuj8LvbFg7UN037EyFBD2v/nbHFsg7tePTwz9MkOYZ43fsokJ9
iNtDvXoKFK15ZnDTjg6/k1VTjtt3whoXKYX8CzRI3KpH+Uv8/WaSN2At5g0W
5g0bkjdAC/NGHuaNzyRvwGrMG1KYN4xJHoMrmMdSMY+JLEy+HGbLBMb1NNEX
iWWw8PBpx+ZHDLgguUy7Q4UJv8dsTIQTG6BBfX5YcTwNfFZ7Xd+/iAlXrY1c
qmQ6QP+8zQO+DVRoW3Rjhu5Pol7EbXhN9e0EGJTa9puX0D0kT8IezJOv/5Mn
4RjmScEckidHSd6GbMzbtzFvX/pBjQ442gVSBXfE6g/VwIElEeFb+9rBOGhG
/dJtHDiwvy58Yyahl+6Oj+qOEP0uyfPwC/P8Hczz60meB37M8x2Y5zlk3QFZ
XHdu47ojT9Ydwo9k3UnHdSeRrDuwEtcdyWqy7tS8Dfpz0rYHnLWGTt953won
eU4pL9yWDN/IcfQej6/G4/Ol9Y813Gai63fyWk4S9V9d36J9hkgk1D9ucyR0
PPq5KYM5WhGvYDbTMTqF0PMjt59QTpf1oFsrfwbMca8FlxTO2tmN1eBUvDyB
6BPQbYHS1TtLfRWW5Kywn+wX4u8/TCB0LbLWoN+a1Lm8ATafJvWtxjkF9iCL
gUS5roit2c0C/bkvrpl1JIAp6U+kjv3Jwf68VbO3g9CF6P7LM6GTOtGJomk3
qQ8jxyhSt5MZSOWTa1iqHgvelke+PiH0GTpIPKANGA+7MB7en7F6Tugw1LvD
OXdSly0aki+e1GNDtxwHnb0ZKJV/yO7eXRac5b7eUsCXDNcrzH8/lWEgywaJ
NaLBDOA8jnn2I70WNk7M3kfoJPRYSzp3UjdlC+yxmNRLZQlRlHBzBuK1jsow
f82CuCtqF3s6ksCvvLk78TINxb3odvAyZ4GAqL9MZHUNrG38IqY0k4rGtxz5
uuQlG85Y3gqRbKmHuWop5YQeQnDc0GRSH604bnRgUhctnbXn6actDEQ9CR3J
dBZYxMpZTFxNAFspzUMOC+joyQzaq19+bDhtc+foiEUWzFT+x6toNeZVbcyr
Vjb1OmGyOYjrvl7FpF5uGippn9TJ399wp+5dkoee3NRbw+XOhONxOwIPr2PC
YbPjBltjClBy4uCDSR16Hdjek/qzUWyEutf0Gwq7VmfISO0ChY3Hk3SPUyDE
d6XB8pmVSGNHktSkHnQZvNW/nNCB0q3vinjda9E+e9MFumU9EKjR1MtN4Cd1
a73R0/xWZPd8ZeOkjkv/8Jbzm9Bvvm5GrZ/raEjdlp15ZTEHfuSMrHA8Hw5y
t08vyyL6nKPhHI1Wou8pk9k6KkP0OzO1M74ENmeBrCQz7sJCoj6FTvQezOwC
c9JemG5vN2kvTLdXhbQXUrC95tjeStJemG5vEGkvHMX2Psb2RjQ2ebk1N0Ok
GrDqZLpg1gzes6aCTSBB+gH2T/PDD6HGPbGrKbCzWONA3IEuyJCb2cOlXAU2
ZHzBDcdXH8eXRpWkz6kn+nu3SsVNhH8uzvgFty6Eww/DfO6B5fXQO7by+uTn
ao/K+a97umGGoJncZL/XesjDY7L/09CLuD/Z9x24Oz9AiL8RSjVEFVn6VLCP
Prz48Bw2mLzOvzjZFzXOizs52ScVf5U9O9kfmfn2bR2w7IDCrP7cvaOdYBT1
ZcT3Mh1sc7Z9nx3aAttjbA72ijMhQpiu4uvQCTe3jykPvyV0HyNoC3M9AyqW
nIg6eZIKG2/48032J20nr+RM9itaClXOk31K01NqvFg9FY4mR94M+MgEq6Bh
ak9SC6wh8wX+4nzRw/niS+YXTOWXIM4vzbZj11eYM0D30rzw27tY0No45+J7
izxQa3+2QkiKAXcqb9edJ/LoqFa1v7dZAsgdHF0yaf8irzt/Jv2RnbdqxaQf
XgXKJJwaoQFPmMNYVkkd6NRv28Z7nwnBAgqBk/2w3iVF+SNEf1zU01072RdP
SHscvDqfDu4nniJLoTYInyd74a8SHZTNr65zleqE8qv6ByY/X+4qO3VmAQ1c
njHybgCdyP8l/pU+VFhnnctRs6LCF63ayMk+U33l1kWZRN/5PHXMYLLfvPFw
xDgymA4Wj2VV3xJ97dsm+a3WZ1rBGJ2sQMU0sN4kVfviFwOaQ2QCyh0bwYzk
MZjise+Yx8RIHoMnmMfyMY+ZypmrqggywcYsdXStI9G39n4WEtxWAJVOszfN
s2BAoNKYjQDBb6vbktw8KElQUnfrr+DkOZ3dEufJ85KlxpRVk+ck4lxXu3NC
2LB856mu3LhKWK7lSQ2M6ISC2zvXTeIj+8R7NR4CL/UbmzUncVL7t0A0fwEb
7OW6iluUmuHgwiiDQmcKzPpZozF5jmA/9m3+k+1UkF0s5DV5nlB+Vc490ILQ
6Y4JE1YTFIhYJVf08EALXE86nj1pf16tXOekP+KEa99M+kENjYwv6WWCy2Wl
9Uc4NFhhGQQHt9dCJFkXoAfXhVW4LrjtvVhsF8GErSe+Rjf0MmCr29D5WQP5
cHOm5uoubwZopMbyrybqhZj7pxvX+JMBZUzsmeSFP/LKCvsJnkgwP109yQ8C
KxKb7of3wDeqhX7H5Sx4kkgp4tZqgdhZXWmT50Tz7WriJ8+Nfnb9OD55XkQV
Svyw61Q37Labxxcv3AAe6YmhnO8NYFGQFTKJe8/gSpXJPCi9sDB5Ev+X76kM
BBhwQHB+XQtThQrGxs/Ks5dWT9VNcMR18x2umxJcm1WbkxkQs2KLry5RN7MG
5Bu6iLo5TNZ3uITruw+u7z7zG7aoHO0DjZuXlFarVcCQj/j2zrRvYE/WfTDA
dX89rvufyboP13Dd34rrfkG6tqoemwFDBTIbM+RYUL3v5SMGUfc1ZOocwIoJ
O1SPOfUhJuhdYYU+/D8dAs1YhwRhHWJC2ouEsb0nsb3qZHzRIxzfBTi+eP/I
HO+/HO/fkvQneon9mYn9aU7iB03hJxzjx4TML3QH51c9zq9Esn6BA65fCNev
OWQdB0Vcx1fjOj64IFjF8DsT7WyKtFmvygDrgUeiBo3fQGRW4VL9OUz0ACwK
165nQtrKd1rPW0pgR8a8c083MpDsu/VL+hazoLB8k5HX82/gd8WjaMXfOqjm
39u4d1M3nMwNStDOaoIPbbcocftbYNWxcN9S227Y82C1/xnlati037xKvZYK
aKHUqaxVXfD8Xa3n1qRc2BtUxu2k3Qm2vutSMr6zYJ/5HteT5nWg8PBvzRp3
OihI6vjqJ7Mg2/pCw7u/RfCG43hp2ws6fN34845KJgNExRZU+8XXE/r+hO0I
wS+NV93vLfdmwlfBFi5LxxJAVpZKDx2YwOSX0aBU0GDAYfbrKNN6GDiZdGM2
0T9sVXmXpPSFAcNKc0V0w0rAzt37ijMPBw4+sr91nuh7vOaKNBQ/rIX3yzdK
FD3uhSUf+zQ4/tWwKrQpUUS8EiLJcbQOj/Ph8RzBdxNmPixUudT3mKQl0cf5
Bq3nJCTDpfqUwF2vOcgpLPTPGVcq1DX4HTq7vgKSS9n5mSwmWm0V/aRvIRPO
V5epZpqmw7E9yaHuiiz0LoAzpLGMDvdoInX3mqtArf+ustJzJmo6eGY0UZ/o
G9MW0ILLM2HGZ9PUqK8EfmjPGLnuDMhwUE3RfVsNOlHheroqTLRn3Z4aOaKu
ZQq5tJ9UzoSEBdbVPhp0pOs+UW82lwVqjKHs5bzVsI+MC7qL4yKP4/Lo47XT
ikwG8ilV3FC4jAXfJgaoOQlpsD1og169BwOdmmUlXnGbBYmPjMK+vkmB6+sc
qnr72pG6a3Wg4vJuMP99/gbXlVKQIPGAMjEeHmM8XCbnwxE83wrPF/ZfozNS
2g6XD2xPfXWSA5cMHJVllzaCzOBri7P+FBhYuMxB/wbBQy+MGSpitcAlrnv1
zwQV7jzbYLVYngOfxL9ydTErwLPz7/uucBr8cphdhILYwLx1/ktRTsHU/kEX
778I7z+e9A9M9480mRcwlRffcF6cIP0Me7Gf27Gf3aner9+sZMK7kuO/Vzcz
4d5Ok2zbjnSYSPoXL5iKVz6O1yoyH+EhzscqnI847tCI4+6K4w52ypnhl5lg
d0hTv+0hoSPThtazGZmgSeIH3mL8PMH4+UHyAGzHPOCHeSCVxCEIYxxWYhwu
f3/hBG8yE/TnRb6qkGfC0VTn2S2jGTAU/6Pm3uIeOP90fVj7aB1c/e755PKN
OjAlcQ53Mc6HMc5LyLyAApwXj3Fe5L4fSfNb0w9JHjxb5dfnE/4oiVjTlDc1
jorweCweX3FwA8+hbhbKCtsa3ruNAXJpjpfjXn+EL9LXAm6w2Ojh+cDje07Q
ID7pkK7W0gLI+3g4OS6XhQxUNgZHnWDA4aiWm/zrEiCAd9Osh7tZqKqaT2GC
mwGqW6Vvje/+BrKXubP0y5jo9CqfV54bmcDa/V494HAGyH/KkhmJZaHHA40z
Txoz4P68WdxjFomQsv3Pc1kFJjqadckuh6jXpqtl289Vl8AV3WdjH22ZiCc3
yOC1JRMSShrvP/2eCXMeS21aGcJCc+cONjvcYcDya4ND2t0JcO+GUsW2Swz0
MCrrnnslE55e7XV9urwEvNUuj3RLM1Gd4Kcyw2wm9KVbt2p/yIDF0hS6ljsL
UWokBw08iXx/uU39CU8cvCtDNRpOLGR34c7FbZEMsNq75prsryhwVzYXmu9N
QSeQ5JsfiV0Qwthje3FjEdh15Nz+3UhHdKcj9wo3sUH3zw4j8euf4Bk5H3Tw
/DA8/1Lpv/WhTp9cf9F+cv3OTknFaH8iH06l+2Q/YAB/Q6qS+XA8JGcv6vmU
zYCDmt43nxF4DNvEOlailgp2pL3wANvrje2dnbbv9J5IFtwo9daZQejoX89N
tGJME8GL9AM0YD/MzSD9kEz6H6b874j9X+7x0HLtFxYEs+alBZ0j9KPVpds3
uROn4gKzcVzGcFz8STxAOcaDGcaDHIkHOIXxoLeHxEMGiTewwXhrxXg7svcf
PgHFkfjU+kbis5hZrqn0rB+CA8etMmwiFLLWffzUdCMf+MYC91tfYCGp9EsD
rCoGuAn6lQmcCYfrzv9wAkP8JE6eWpA4CY3+h0P4OkziUF+AxGFo6D+cg4Um
iXP3TyTOnX2H83t9epDtRXaI1dtWgMZQpWd7I+AbuR/0Ge8nCu/Htep4+5Au
Gz0TkvxY10MDYwst20sXC8GWrI/oCK6P93F9jJCTeTh5HhT0KJKnaSUbhs08
dkyeC5WmDGZOnje9uzD4bvL86Xomqpg8d2ryM1s8ef61mJPkOXkexvXL323y
HMyNfC444+c+w881v9d8d/JcbyblN3PynC9gWX/V5PmewibPb881euCn0uWl
hkmtkO1+6Eeddxb4k/aCGLY3BdtLe0xReazOQSUFNu5EFwuC8v05isMZENdu
GPvoFguJWEm++7qLAbUlNfsWfcyFZ6QOR9uxDp+LdbgJ2aegqT4lG/cpt8h+
E031m+W43zxG9oPoNO4Ha3E/KE72oagV96HHcB/K92a73T7rWjQwm2uhI9FX
3t9qQJFQoE316WiqT0/FfXrLFcFOhYWR6e3fP+aaefRC6K2T7Z32jbDPQILn
DCUufTNHJawO9cG7NlOf6JQqkDxc7614Oi392ihDdxKPC/euKWgk4j4u62a/
N7omPeJZUOGqwX7oftvkqPY5GhJJ/xB1gfTPjFLSP72kPyEd+9Ma+5PqEyBn
a81GXtvkzovepwOf7M9vlesTochRq+nPOw76ec7DzNCyE5pVvL2C3POg9xuP
zlxJFroWf3P5xjqCD/o3l23gTgPNo3/DXBTZSNG1JKp7KQ0y0r32J3ZXwtZc
adEDT1jobir/0uFUOsz03GKabVk8VaeQAa5TfV/IOrXumsz3Wksmon6OKeZr
p4OSzw1zn6vV8J3UgUga68AWrAOVyXqKpurpaCpZT8GtzdKcj4Fs14VoZykz
geeMS90jp2owI/UnasD6Mx7rT1z30VTdv47rvrG0tvlMfRrSV0o34/3DAhkp
fec86SoAUvei/Vj3ZmLdO4vUM8ga65k4rGeK3pn+uazdiFiigp5uVt3wZU+R
jJ9wPcSQOhytnKbDT5SeX/zhSjb68uiDm/94D3heuBby8X0T5KepbbdVKES0
iPnST+b0gZ0Jk+dgcTXw7jyVvzWHisICTmQae3ZBa7TIWZ2PUXCIXAfS8Dpe
eJ09aZzdtztz4dHGhIlGn17QPr+fqnawHr6Q6wMdr38Pr1/+yvNl69xSMBY6
hoIP9cEMqdO/KkzKoZ3RQbeuaQDtgZkn3W/3ArcdI33O9UyYkPm3H3iP99ON
9/OdxA8YY/x8x/jpJnEILhiHWhiHu0neQPOUSd4Ix7xh6mE575xxFzrUETUz
pogKcu/nLk5wTgOm3yHTGy4ctLxxeNZGWYKXeOrOtKnHQsdb+TwiT9CYeLDO
zuIsBa4qEeUjRL7cNa9f96GlD1WuHFeSXlEBvT0aT9hdafDZxU5PJpOFXtJm
H528h6lKzXw0ef/C8yX2GVWXhR6hM9T9HxmwNOapwIjdF7AgeQ9xY96zxrzX
TPInmuJP9hDJn2Uk36JQzLdXMN+K2zXPGttMR73yF99prmbDPP9LMR3DhfCS
1MPoJ9bDnVgPvyf5HAVgPu/HfJ5C1nF0ANdxf1zHX2Rd+8qKqULI7M6857J9
8JS+b+7i8QKYs/QH/7HWDrR504oDd4y7QfDp5nV8GdnQTcYXaeH4TtiS8X2y
MrXe6n0rMn4edP6UbQ/0rD3ht2BbMljk1fBpz6CjbTtX3TCksYG/f++gQWo8
XCPHYQceF8bjl8j8AgOcXztxfl1+fD5//TMaCDwsu+uYw4Royp3vTOV6YDV/
NL8SRwc1ocx+s1Cin3rvVC1wrBoUyHyHqXyfi/M9Ri502COACa93iHmfetYJ
39QW7dvA3QwJhzvdRIk+4V6UTqLYQRq0+wVbZS6rh4lu3X2VTkRcU3P3bSih
w5x17ZLR6fUw2+j1gc4lTNjtVrD/pxwD6G3rlH96VMNakq+gA/OVJuar3vA7
9nOqODD3Q3OdomMbLJf9W130oQFoGivlSjs5cCTqwJWJWRS4PfyEfi+jBi5d
1bGQIfSDnt9F/q4PnSAc8ONGZEwdSJP8CTcxf0pg/hyXK+VeGNQHZj2+y9rL
UuHSrEVU+ydVsPaCdtC24T5oHV+p9HlGFiQEmuUVzikFxcCFXwOZXTAzK405
Q6QNHg3w+qSWEXlN8jxwMM/PPkjy/HwS52CPcf4E43yIzC+YjfNrMS+ZX6Dp
8ftsMhuKlWrmuh6jQ8Xph+9o+4PBjswveIfza00vmV8F2v/mo8V7yfkdGuT8
O6S+BSbWt5ewvj0w+k93wcwMUncFLyZ112OyzwU/3Oe24j43eNs/vQ2GtaTe
DvMh9fbcdfppph1sdLChcGbN5U6Im/Mg8tLRSrAl8QxXMJ5/YjzzkfNBAc/P
wvN7J05Ydx3uBXMYWrXidT2IBW/9nBxdBKkkb8AzzBvjmDfMSb4CecxXlpiv
MC9BFuYlY8xLLnBbppbomzZNqKVsW84AUT3zzb8Ck2AcjAXO8LBQu9TzwAdD
DIhNchpR1PoK9r1qg20hTPThlL/s66NMWH5+4xv6vUwoP1S0KfkUEzno3axh
+jKJvuOYccjHTJARuXvt3bFOZF0zr8PBjwGRwu0TO+raQK0xWVRzFhMJmjkM
mv0i+poj+6NX0b7CwS0qhvVuTSj0k7OOThQLdpx4OkNLlwr0B77Q+4uCHtdl
W6H5XRAXejMyWrMcVMn6gqbqywlcXzrIOoKm15Gymswluz1QepoiTcMjrh+u
KKqtiaRnQ7VMWOb+KFp6bYozb+FYP/Q86Ync9iUY0kSfvprUZ5o/59yePL/P
SbS2ndRpXIr//AON2D8in0n/OGlVuU3ei2S1G5yfvCfhGXxhO3k/4kH6GZZj
P/tjP7eQ9wto+v3CFZKX0BQvfcS8hO9x0Ht8jzMD3+PIkuceqB+fewjgcw/O
69YJzR80EKJ06j7tZEH1wrV/P9SXwUaj8XkeWgx4VC/dEE3wijhv3crQ3ZVg
ELGlbPJnHk3nJZO/j5fctnZy3OPnMT8tom9yWaI8dOstDWhXJQ7esaiCdCMY
XfG0C87HX98Qc5gCJ/fo8lBMysCEvKdG2/E9tSy+p+4kz5PRAXye/ACfJ/uR
9+nIAt+nn8X36dXkuToKxufqwfhcHX9PAE19TyAef0/gJnkfgabuI4LwfcSv
RycXH+HQ0MTBLQuW9jJBiVqzc/I89pBLRBpThYrcZ1zgCzTggO28rZ8nz28T
yPNwtBifh3PweXgfybdoMeZbPsy33OS9AHLE9wJb8b1ALFkX0FtcFzJxXcA8
iQQxT97FPGnDY7bT0KsLXStI8CzgboSVB7Y77jnXDMYkb6PzmLf5MG8rfXlY
uyqLiY5+vNO8VZAKoQuC3p3RbgOunn/1BU3Vl79ryfqSv0rsSkQwBY0lnQvd
upkFD7/17RcVboMg8vwWVeLz2xP4/Bbf+6DD+N7nCb73kfaS604ppqEtGSnX
1ovRYaEu3wKble0gK7y/V3R7J/Kre3LGdYAJcb9kQyXrmuC2NEebM6sVjXxI
/myh0wVFzeqpt3Y0QFNyl3PxDTaq1hazGnpFB1GH+3lmcmHwXTDpWSrBM85v
fezsQ5gQPHS6e2iTAWx16dvmsIuN3qR5Gsg00cHmtyhfdG80fFo0XBxOzG+9
LyD2gph/zmPllrVzLsFfo5Ydq1az0eGwc/UzCJ60LpPxHQiOhxc55rWBxPzH
3yty/Ij5u4vGPpc5GEPTLzUR3/ls5OewJvDxBB28eroLVs9OAPX1UgGexHxz
DufjW2L+ef57AWF5l4B9RjeleYKFrsjvL5ddzIC0J/sFRGziILvdssmZmB+e
8mEsnpj/NemAQVyWIbjzXmc0BjFR59/yuemEXoiGUa6JoQiArFNmEuNM9DPM
b4kUMKHXYdeXFG9/UG/PSPj+iglCPZqrlxDraKjk+U+I+MMVch2YM0GuY4LX
kRQXXJLlzwRHK6sH7wge5tE3jam9HA1XtzH5jPyY0NU3FHjQhwnb7/R6vrwf
CxZpWRtmEfPzWwvCmMR43VJnnyPuMZCYR5O4RIwHbWQsdA1kQnd2kqv1rQ9Q
pRJ6UC2YCfta6h5feU2s/2GnX86ut6A9a4ad2FsmSkxYXLSU2OdxSobq9jfH
wfT94ftnCT9kJZ9Q7SDGbznMYbzVPw3Sic/17xLjAx2RmogYP/giI3Ct5QW4
SM6HHDyfn0POzyL9CRHYnyu7SH8eJOMCljgu71Ps/8XlORlfcMHxDemd+Bff
FBInUI9xEhUk+g8noyTewBrjrfiq3j+83SDtAh9s14JE9M+u8JRLUjrBTGSa
rqIqR/gn5U1nyKK/4VBzK950PpHvvN9bygcI/7ee9hEo7/kIH1Mfa970Y6IS
zuLWk4Sf11jn/LlzJRYqHxyVqCHGj4qVxyYT447VBibKjTFwJnPTktWBTGSl
PGzIRcThuTXFrXJjFGwh/QY/sN9EdDP/+S2JXAdM8TpyNeQ6ZWHRu54R84zD
wta+Jz5D59IY/R4X4Q25H6jH+3mI93OlwFrRl5hHOZt2LZj4/EOh+UeYGkMZ
aRfwY7sSdUm7GhOFa94Q8w4MKm73Jj5llsmGfZlnTMThn3/gEvZPPfbPZY1v
QzGE336F/C5qIdY7cc3fvnAiHP4q3Q4xIfy24bNY60ti/d5jJ+L+9H0EucDo
QJ7vTFRWP3vw1z4mCLreqFIh8LwgY1SxhPDbCw4j7vdLJowLe9fWmcXCBrc+
/9w+Jur76PJZcD8ThrZkc0ssjwVTy+NSW/yZqHr9Zo+zhL3e3Wd4fZpjYMDr
pUcKMV/ieHpiowITzKLbS9+URMPlxqt21oT/BQqVfcIIP3m9suJqFo+CleNG
ZjuI/V+YafzegNj/Y2e3I8XDETBo1fe07RUTTVgJOWUReXnSIlV0uWco2O2u
jhL2oMFM4ac+dAUORHUNjl4ojYOf6mmJLMI/8O3CxEcivn67y+IEiHXUbcqW
74ulgcaln7taRDmwVWXHsrWRiSD4Ze/NcuJ5QwdUtL2J/f9uei4lfjUaAi5s
Do1BNDjCV/GqfSEHKh6oHUgz/QSZXbx7bhDrxum81NtF+MfVafdProexIHZ4
/OPKShqwmRc9zvJwwH7uqTdCSonQ5XzzsgCx/trehmv1xPygIMeMaI8YcKCO
8V0k+Ef99AulTcTvc43ZecuIeNlx5/nJvWaia5sH9hgT9h6FtuqnXqEg3qdq
SiWe+1c+8nYEsU6kjvhARFMMBJh+t3cixn98uvnqIDF+O2MZoSFioSEmrnIl
gQ/tFfCOQtjVP+JSuZKIe2TOq9XvCH4oLX1S4ULwTPk2WoDUJW94R45DJR5X
xeMbDE7dYmgyUezYWcWhDiY4L1a9L7YqGl7L3szbd5iJbBzVxiPqmFCmwfky
uPkTSK1ZGRGlSuAqqWLpuUom8IX4mJW+/gyGM31NHhDjIu/qdjhVMIGur70l
q/MzjL7c2CZIrBO+w3HrSDWRH5nr2pf9/QQBRVzbjLQJXI1dO7qMw4TFjfNe
3N8VCHm8H0vvxzHBlvW9RPIFEWdYlpK2KwAGu38ZKtewIOj+4jUuBxnQErkw
YcXDOMjME6tgCbMheucW9TMzGXD/ZcTgNuUIOLeu8uuzN0xYpn9OMY7gIRFR
1W3Wbmqwge4fHkP4gS3fHf5o8r0WbvuP882NoEDuy6dK4mfOOnG9y8TnWZXN
hZ9mnwXnayafj/CyUMepIdMaGSZIbrxY8NwlCF4OK4lkE3GstS2e20/EUbRf
PchD9i2kk+ugn3idii8b/62zyh1MJH8x0ZuCFQ3GRH5lqbtbmt+LhPN37+9p
I/JlJfV3CN9k3VgVWBRx+wOsJfeJ+vE+i01s/u3ToTFk5jkiH4X3MVPdiLjf
/uNa5u8ZAw0knyA1zCcKwzv+8UlJz+7yNCLfs1VfBHAI/Bwufezyk8DzNZKv
EBXzVY0T9R9fzRQ/KLic4JN5QrMS1Qg+OdLWtIrPLBqqSD5ERpgP1+2h/uND
iYkbAaoDRL7PUL3uTfT14oLxL8S038PlilzxHQT/NPVy3X+kTugKxR1OB4df
g07BGMWMWMe0ydQvgMgPmaf3HqxZ4w+mZLwQP46XSdTBf/Fa6f1NKGQFDTj2
TnMsiT7YcEOiQA0rDJLYoTxriXl/8yYe0wk+iM94fV5f1B+snSW2izFpcHrw
4cCVcTYsnRVp9HlJLLxYefOpFxEnnRXsZacJXormijdsIeryBo5WxQsJOsyz
3PvIspoNXtbqGgOWbyETdmtZE/hhppqulyf+bmX/fSoPEV/azB9W44T9yiyF
FZJEHqEP+9UTjL2B2/ofj0Ev5rEYzGNzFqa+7SHmNYhFPY8n8vXldm7jYWL8
MlmnwBjXKUNcp9IWyL+TJP6+RXJAebJeRN45uWsuwZ/V5HPRCfzcy/i56zyG
fL7/YSL3u3JSOgTPVygKWC+xfwf5+21Xiw0y0a7SK00HCLx1pLXwOl2Mgqzv
lc1+/UzEGldybiTmDzSo+Tu8jQGuk4vb7Qk+P2jgUplKzN+ht2CRQ3UMOLNL
uvSI+RrJoR9uKRJ8+N6Q58NYFDQYNxyaVfgIvY9zTF//tx+OJg6pRGh4gfmX
utcvwihgczzt28iJbji0y/4Zj+NLuDdXybeyiQa/5lsPGc7kwNe06lDpPkJP
Fr6akPpNgyWanDV9g2w4cVxahp/+HnoG9Vro7TS0TnK9ptAfNliNLd5lZ5EI
hkJ6d6wyexA7vjKYEtgE+m/v3tE+VAhhWo6fDY/1oMP0Olr9qlJQm8lnvUqr
Gbj35l9XZnWhOdu5eF32NoPTIXdNt7B6qElJOGbCYqOq+IRZRpRcWHEhMerO
XRoEynyJmfWMjXgWxBzftLEGbGLLKhninaA4seWsDR8bSdYM1NZIt4B8yerl
7E0U+LZx3Vj7CA19XF/Rlc1G8DH2pVBQLBtuff624NU4Dbkq7uMfVKyAIN5Y
v1npLJAvcMvv4aGjoYlNxjWJ9UBL2v3UVZ6okzk158VX0dGVJRWrQyZawUkg
kfl8L9F/PFh7k0+Vjo6eKk3vI/qj318Grm2rpMI5R0vRNWuY6EHSc6WtTURc
Gk/7i0qng3aG+aq31BYkXqP04HrxV+jTEz085NcDXp9rqdfFWlG00W3p4Dsl
UHosXkqC3Q36r/r9Kd6tyFJJtZW2uxaiV7czUoq7QHts+FP/jjb0q/LcyaRD
zSDbffv3gDIHaj3+OP+c146E3NW3LSjrANcHD18c0WMBX1PbeP3GDmQ+OHiG
o9MJSyoVb5msYICFOHf8BaNOVH32wn7d+SzYOrgq27G9EbgDbrT1MWhoQbeT
zhtrFpii5cZHg6sg7nnwqbXhpSiL68HGzWmp8Lbjo2z07H4wt3c8eW5+GeI1
yJLY6V4MdwOP2SQ59cGg/vlTB1LL0PV26aWLhquB8SBLWy28FyIKVrMEE8rR
oy22w2s5jZBiuTOu0aoH9tZsSHnCVYlC54KRtls7HDb2UPcd6gJaywWXy22V
qP1924sAGhX6j5jI7BDnAJdn4c5ro1WoZcmHOe0H6TB6VOlnsAAL2ka/19w3
qkMX1+/axlnHhr793N38Qp1gz/2nMlWwEck+yKQO3eZA4bO2WxSTdmBFh1Ud
zvFMPxVu2tolnAqmdeIRTxr7IehqqRVtrld6Ny0m3Px3Eey1iMp4YdQPihZz
ivycvNLNwsdp+19WQ2lFLG33mz6Y9W7+dvst3unB+F6qA99T+eTbp9YIvUxP
H5x3REKyHRypEc+zdveAZfJDpvRRn/Rc3qicJYVUaDW/0+oY1AUFp05qatB8
082r+FpqNOjQ2vJSODCdDfq3t+45ww5Kn/rZAv9exmy/2b2/b9Kn/j4Pr7ei
SXVR4FBougN+HsLPjyLjCF+nxfEKGUeYPS2O/WQc4SqOIxPHMZSMI7jiOH7B
cdxDxhFCcByP4DhSyThCG47jAI7jX49/cYRmHMdxHMcxN70rQVfroHevxdU3
a9mQeib7qf7STkKn/Ysj7MJx/Ibj6CB6f26uTQv8dTEP/6HcBRvv1VtuXNcI
x8m8g+l550HmHUzPu/Nk3sH0vNMi8w5GpuVdFZl3MJV3j3DeaZi2jW0x7oQT
xroycXwsMLn9LedsayPMIvMLpvLrMs6vkp2vdbO3MuA7W6N4vhsLGIvk42Ov
5kAhyWMQgXksGvOYJclj8ADz2GvMYw+MKXNtx2hQ2rFvxeOsejiziHXmGlEf
at6E7mcN04Fzd17L9wYWhL1u4PBXIqgk+RbKMN+KYL6dZZrEs9iZDXc/Z3W8
k6mBJrX6ugXSnXAxasnb+X9Z8Ec5j9aq0QJsfQmuOdIUkLT/5G57pAdqJ5bW
0DaVQp3qa3rfhWaYRfI8jEuTPO+Oed5TvnNsW3IPFLSk8/F/bYLZkinXvpwv
BGnPRC+jrT1IMSzAJSqzFTIrQwP5D+fCIb2PD47596A/lADPe1fLYJFT8px7
MY2Qelf1TcxVDhKmc3riL+XB3aOVNiM5nfD+C5139nkOEtmxq0PvQS1s09yl
cDeAAoet2w7V1bPR+aLK8uGuNrjRdDS0UbAFts37tK8zjI70DG+uG5HNgq3d
EB2zig2u3n7ym1UZiPdRff2SvQSua++lzbvHhG/1ozdV0xjorX6gGns3gbP6
2VXn1tIhcoVWbLNNGxobyq3vb/kKXYPvFX2le0Btf0JZnkoHijiwwSyF8I9Z
jcBYE3c3JD+bMHr5jIIS3wkFJS6rg6MzNRSLVTmwLizmD68NFV2braL+/FML
DM/szFnyk9BfFUlBkVc60fuRDO2v3yiwYfPEg22L6eDdtez54UU0ZL/TXqH0
FxM2HNfaXrC0AXTyaHcTF1SiHX9vOaGSVIDFpma08j7gjVzVXjdehX6gWInG
oWK45/0qQ5C7D957pC1lCtQi9s3BQh+rGri++EKJbHEPBD97e1dWpx4dDFgk
YZTcBGtG639zCXeDpsdQvH1VI5rx4E+J++MOWBh9Zf6HXjZcrVhbzxvSgF7Z
sYQ9edigoCpyZssjKgjahokXOraizjPPd4oIcqBTxHTsT0YLzKg+VOz9MhiF
LVR96iKRCt/HN69YXdcP8sNLLlRXRKN9/hs7jmwthpg4l5MxJ/ohesY3fgXu
ZGRWM5G4qrIaVnH472hZE/vX6qGFaoej/CDtTGYeG4a3cC2wlqPDg5nHS2Tt
vqBnQZ9MJ/yIusLOYlk/poLo6qWd54vzkchac03xkW74nNK2Ml60De5YhTkt
2FQMBV/m8r4vTQUNiWNaGbv6wfBi1qqAv/mQsVuzNCqgGJbV31IQau+DqFJJ
fpXPOXCo6eD534XVUNGz6LHy3j4Y9toY+Xm8Gk4qrpRqPcIGIb36K2WPO0Fu
xgfzI2+q4efAjom4EQ685CgOfN9FAdWzLvrhB5oh4aLjjpa2r5DVfJv6d6QH
Rh773E+ub4STqwXmH+AtgezvWoFzPvfAX8m9J5xeNsDN7Cc2a7/UwF6xI5cP
CvSA6Kqv1yKDqNB0VsGlR5YF3IEBJ75bNcMq3rO8wUo0WHjTXCkvGEED14Og
ZYoceD4q//asD5E3ckInCi6Wwz63kDXi3WwIu+jnwjdOhXlMaXnL9DoQenTj
0kOCjzNEv1c9XscASF7C30zw2MjTDI3AuDxYupN1mPsUG3wPBESo++SCndCB
/lfb6fAkYXj4wX0WJPPJeCicrAb+mCNhPHE04PWhmO/4zAT7Pr7VRy2boO6A
z1e7V52gK55kKT/QDWGx1VsvWpdAQOCmuvezWyHe+q1xiVMXnNp5Wv+5eSNI
9LiyCpSaYSirw1O9i+D10RCFlcUNoJWhc7lApeR/v48xiO/p2vH3MfpPOrEl
57PQrLGYmUclmBDxMeFdwd1Q0COfixLwc5/h505/v9gEv3c2Nf4bj1/F44Ic
64UyRF95qVOU1dvIgNqh1WH7w7Ih+y5fepEkC21KPhVaQKfDuztq7sKWpbCc
9BsKwH67g/32cEzul/BxBord90NxdRcNUjvVxmIJ/Tw/9PmjXfZ09DLV54Tu
GB34JxpaU/2bYLft+FP2KAXxHdBLNrKjA+VD0caxAip42wyu2l7QglJE3jQZ
KnTCU4XYrPgTTPBgJiT8TKlFfeol+VrcnZApIjC66SQb7nDnR92htqOMoKMK
X03psKLosvdSORoY7j+SbTKrFt2nKNk0H6NDVfaRnFdEn0cNnN9y7SINLZ15
ZWXLbjYod6i2hZyqgLJp7xFPvVeb/v+ML/zqWMcWykOOPd8Hnhi0w+2VOyrb
krvB5oFL0B3XL6i+7+whKfV2+Kw8Q4UzuwdEeOe+LtIpRi5Zdy5K0Kkg+aik
NDKXA/w9jIt5jxLQyec2Bf21VFC8xD3Bb9cFAxdTz7VaV6BrHkz33yfo8HnZ
lruT77WoNpmbPxB5hwIdXw7onaLD17Pib87HsOE3mb9oKn+X4PyVJ/MXDU7L
35KDa126lavR2AzGwWVG3dC1+ajOupAW+BWXa5Hi3IKq3wa2vf/RDfI3VvtR
D5WBo8rVqwnsKhRkkWlU4dIL2rM1bulMVIJJwhL2OqNk2PR4NRr/WA16ny/l
ltn2QRJ+T/nGNL/l/z/j5qTfYLrf5pF+Bvtpfp5J+g2m+02Y9DM4T/OzNOk3
mO63XtLPMN3PT0h+hoJp/Hyb5GeYzs9CJD+DKObnZMzPd0m/QTD2mw72Wz/p
Z6jBflbAfi5QMboyJ6gawsq9dwWv6YPNY/mOtXX5kCgfJRDOVQ3xy7bMo/YX
w509fjd/z+oDL3POjELRWtjOtGkRO18DOss61DjfekAZvwf9Dr8H7YHfg1ad
Nj71fvQ5d+rC3U/qoOvCSO7jsXZ4q3Ns1rNGDoTauDyW+NsInxSdjg0d7oAI
t0Id1hAbXpD5CNPz0YPMX5iev/pkPoITzsdqnI9WZP7CVP6uxPkbXNydZujS
AH9+BD35u5ANwrrMsR0PqbCIrMswVZfpuC6r0F8fputT4dC5hef4+Dng4bz1
lcbdGjB3e3thoXUbXBFYevi3QDpIP3kanUHonNEaqoYNdEDMV/UzR+VLQfjC
WJbk7G5gD4gLlz6nwGjzft2euXXgeH13TsshDqzB71PH4/ep8/H71OumjU+9
Z60qVZTFL0UFE+dq7ivnKZDBPVQXaMMAwRs3HJFdJ9jGbCleFUOBeYdU5yis
pMNaMe0v9DEKGEdJ3ckI7ISlJw+rj6TRoD6Qb56nNQ1MJDyGl66lQZJodBV3
MgXkSP6EKf6kYv7kI/kWvDHfCmC+lSR1I5zBulEa60YOR7nTARhwQ1o4bI9O
JXhkL+IusWdCq958K90vDBDf7G0zuo3Qrx5IYs1G+v++f30F3xcb4vti32nv
ZV/A40I75NtCPBhwtsB+2GNOJ0StPVbQ4t0OkvI6Y4NqTDjYeWSRpVcn/H3+
PFyFtwXuk3UEYnAdycZ1JJnUz7AE6+d7WD+Hk/oZhLF+3on1szqpn0EX62d7
rJ/Vp72XbYfr4NT48LT3tbPIOggbcB3Mw3VwMVk3wQDXTd5fZN1UJfU/cLD+
F8H6f/r3c1zxvbPYz2PcmvuIOCzgKTmgRPBPZW4rzS0PXBXkxcfms5H+Os12
n7kMGBJ4s7SnIAoc7esbmGt60YtH8jmzNlTDcG6dtvHxGlg/w799s18XEvnr
ydwoT4GwhDCJpMNlUN5Roum7gYO2xj7OGJxJAVmDoNw1ag2whfQ/UsP+/4n9
L0zGC+nheL3F8br0bNeKJhkmuvrMbs39PAYcayv/SVcqB9rxt5RQbwZaIfSx
8NxdFkhdlXpA508GueuG60SH6Uh6aXy+qgAD0n+LGlxMaYDq45TN8h10pCBa
rDQngQngstB63YYqOMEpr7n1iIIMXYZkByzYsIcnLzumuBEo9zYLU2w60e3v
rzcW+rBBTvzj8q64KhAaufA05QkNvao5okNhskG/TLSJpy4HeNRmnB81z0FO
txMmPA/TIVCIwnlzjA3dkQ/zUnQK0EVbWr2BF9EvOXHzOKXSQKtFn0q5VIye
Du2pKj3cBTf2j96OXE6F7AHd3aIJZWiAy+i9yYduiAq26P75tBV88jKMd4s3
oHkWg1ZuGT0Qe/y06/HRChD3i27t2JUFXw1cI04faIeaH85zTrK6gfG23vfZ
lmzwqJSdub+cCgsejbUa7u+CCdV/+4Tp+6ST+4Tp+zxC7hOm7zOF3CdM7fMj
3ucLcp/Aj/cZh/e5lPQbvMF+M8V+m8nO22hJrYNluuGzT9vVwOjMImONW//3
/2lMrxfsebEOG483QHKRwYDmog74Me/1UWELos421lKzrzTCWXbZjfhFnbBa
lH387DUWLC8ZFB2taQJOothVviN0uDqD/b1pBQM0Xr15u1O4A/ZuMvZdfaYT
Pu8O0NuwigHGlR2ziw5SoMt2foL8JTp8zB4L6XjUCYH8tZJLZrWDSflKC+TF
gs4HZxdqbOsALRI/YITxI4/xUzsr0ODJESp89eR3aNWsgzcyZVENqf/3/2NM
5+3Be9Wf5dqpcFXpWPpOGwqsX689JFdFB67t//k+bwR+n3ddTxM17HQnZJ+U
pl0rIvhoWdJ6+pFOeLj08xMBeULXSn4/cHYvFUK93DsSCJ2S9l1WqGykE+bl
WA3ufUuHu/dLFsV1tsMHvQsfmp3pcLHywW33q4R+Xle95uuidthF5hFM5VEO
zqP0evmZy1qJ9b9Tt71KZEKD7l0NXskqMD1iPMR1kwkO3S7c7mJVMPjz4JoP
RP8jnTYy+l6RCYe6RPo3JTSCQbjCjPcmtP/ibQPM24sW1ZQJ/mbASxl67kPo
hLob/gWRLa1Qgd+3DcLfC3qPvxfUkSNj3juDCd4x9MsLjhL7cj3Wscm3HpRC
/gotGGOCXKTGwTn+NMgxVdxiJFYHF0k+gSuYT0wxnwhtF4PML0w4cexc7S5H
BnBMLHc8mVUC+jo7Th2q7oJPR418tLYWwmeHLBUnawp4SyR2agl0gbzXBrbc
knq4Ekdl8Te0waoFpyYiCR1wXyLceWFdO/TfHBU33dX0Xzxvg3ke8yo8wLzK
m0fyqlLbb6nR+WyYJ5en5Efw8GCi7ZvPBA93lAQbl/xlIs+iNzW/fWiwrU0l
SWhtHYiQz0WP8HOp+LnT+7LL+LlU0m/oJfZbA/bbno3Bm0+KUkAm9263oXo3
2KsYxMVHZUM7yYcwnQ9rHC23BRI8vFL54fwzBA+3lPI9nrkoGQpJnQ/j03R+
SNfMileWjVAp1LtS61MX5IhqOnaYN0EH2R+BEO6PVHB/JGwlP7CWiwGzXIPm
Bt9hwWWpfMVvXwpAMH5n1DxtBpzPU2pe9ZEJi5P+9iYX/G/dAQlcdw7iuhMh
/dGwYScHDJUf/r4vTQXr8dVbso/WgL3Gvb2Lt/aCCuOj/1+fGkg1mhtCuV8F
P8h+GYXhflkC98t4PjqB53/A888L2oayl7HQfU0/sf0z6MC3v1i3gKcGjG6/
z04/xET9X13nWMUzYd+5BbbRV9LBTy5NimLKRLp9Z2wL5xL9deGLPU7Li2Au
rBzM02GgxA2nzL4pMCCh+VBGeXwdXHaVcrX/wUAqx3qMrvswwE5/99xl9lXw
B9rlWqvpyCFgxrLF8wh+MbU9s0UlHe6WSpkdaKCi4yY6vGt+cUB2SGePsGsB
WJPjoIXHFfC4ZxJ7hc5SQg8rRt0N7uDAcruR3A+R9TBCrg+OeH0ZvD4vuU+Y
2ucXvE9Tcp8wtU9XvE+3S4XRY+EMUFaVmA1qLOCZv+BXm17GlB/gNPZDMfbD
OdKf4Ij9KYz9iR6eX7RCl4V2GUpfdv7EgIv2+wz2FCbDx4jwkorVLMR6PO9s
3AlCJ1wws/WNKIRbhcry714wUej1BfqCL5kQqF7rfdUrERrXvDjowkNBr8dN
jHeziX5qQEMpT/0b1JLjEILHWXi8pODfOnDInFyH5zC5ThT5XKDj597BzxVy
/LdPWGdC7nPjA3Kfa0jdhX5g3eWGdZe2t/F6gW42sslpoT5/1wnuZqtcPBrL
IJzELbqMcWuCcXuKnA+WeH4inr+LPB+Gjfh8mIrPh7Vl3Yxcv3JghsdxztGK
TmiSjk/X+Jj8X+891eP3npaRfIh0MB8WYD40IesjmqqPUbg+viLrIzLG9ZGK
6+PcUu3gp/6x6dqrW38rv+mDsccZF0e9q2GT6CXXiWUp6Sfnbyr0M+qHKz4R
vV9GiqC85u3wijdF6cu23Jr/vLEfDOoCLeuXpf7X+0fc+P2j6e8TNeLzq+l2
VWK7psZX4/FWPH7Z6cTM1aUMtA9JSbtRmHBA/W/QrZ15sITkGTTFM3yYZ1aQ
vISmeOkS5qUbDl4VmadT0Jn+Y4v2uPRBm1XQuuM61bC9r6j7iXs1Ev5Vu/6q
Ux8E6wteePjjMxzWK7swVtGJzpyNio5t4IC6Q5PT4rnvQYdcB6bW6cDriJDr
wAq8zlu8jnEpkzq7shPGE5rHI4h13HSj5OjEOtP9No7t/bLR/0/qVw5SvWsh
PYPAQ2zv8xde0cnQHLDbI9OkG5W8tnv7eDkFvomNGO9hZEC06etbCzNYqHBx
vpfaWsL/v5vbnw1kwH3lhh1eiymIuqjFRe5lN9QM6ye+LkkAL/K8HabO28Xw
ebt20ojpMi06lFeNCKz9xoRf37P4T0jWwJ7dDpfziJ//p7Avj+Zy+/5PpUhF
EpkaEOqWBiVKNhJKqZRKMhSNokEoReGWuYzNMiUqQ4mQ4ZQyR2ZvU97j8357
G0uGJr5P9znuWj93fdbv37PO2s85++zzOq+9zz77aS/uviGjxwItx+kF+gpN
oIf9FwHsv/hPeF/Aw+suhN8XTHx3MBW3p1Pjh3w8/tN4/CtXZW5tXtyJCj6b
2i2nkX788t6AxjU14E7NCwg8rxY8r9VUf8jC/S1wfwalN3iL9SaoTOntxoR8
e0WcB36l8erA+zccFH91sfzi+VxY3ho6oL3mHQS79Uvn/25FcPLYcZE8LhjQ
52a9J/noeD75fCznPpZjTukTjevzG9anIRWXQEYT4hLhFM6jPIzzUhjnd38b
2cgl8ch08BG7uZILU15K+eqdrvg33/sQzvfeh/O9x/OWHXDeshzOW747Ia/b
AvO6ifneh/5HvncU5nVNVPwBncDxh5c4/qBAxSvQeLxCAscrkikei+wxj83A
PDbBQj/mUi4LGc3fLP+cRoDKr5dTuRsaIJLibwgwfzuE+Zs4xT/Rbcw/KzH/
3EDZJ6Jj+1yB7XNiXrcbts/xdjHc7v4/8r1lsN42Z5lp7I5ioK3KRgoBq7ig
u9VTgenbAifrpH6cqupA9VaHp0e5cOG5C5M9Pasd4igehcZ51FvMo3Ipno9m
Yp7vgnm+xsILbsZnWxF9mX3lki1k/41PfCwVadBJxfmB+EnF+Y80UHH+9xE8
Nc0jBLR1Tvu8r56A2FZGyRb7BKih2hELt1cVUe0xOO/ODefdleG8u5hh3aK9
HAIulCx8fcuIgN8O3m4ef6eAB93A9SuDgI/7OPTQQwQI/Cxye/cxDJgdki+n
b+GA6kFt8TgmF05V3AjzKoiBAp3g1Zb7OCAhr1ttV82F0PLyZdamjyHNb09P
JYkvj6fMPVJNyq8o2zCnLeEm6R++zW8lx2FbZ8oWtSZAojB0R/NQIqz+IDjY
nsyBWqk3D7lHuLAwmJZN3MwEy/e/lPPsSHy8HD1t6SsusLy+PdLzewk6gf/I
R3MEKPnFcyn50378My80rYiaV+sxal52vsWKnaYEKjGrWSX0keQLe6/09zzM
gAZP+5yXJE/eHrXv9j6SJz/q2nOFN+M1LCn7Z5yot5YaJ+sdNc6J+VEI50d9
xfmED3E+YSPOJxyoMdxcUUAghp/40TfuBOTat/KtzsaBo6R/xiKS/+w5K3zc
keSfBaKmGxbVRcIbWtDjPQYcVHrDbqU+iwtrDDZcLSf1LOB3P6jXkUDnzAVb
w1MJcFFeV31pdwaE4HwncZzvpIPznV5MOGfL8fky/s5oKcYrUYxXE/MhuXj8
Sud7Y40XEsC7r5ZixiVAY62TsPD+nP989xD+rmPUsVySN6AU4yFVt4x4nW/l
w805JH/wy3mU7BDSg7L2HVT3ko3Q8RSM38HyoJF2KKJ7exMfcRZenJFnUQ5B
0/N9KyQZwL49v559n4+Cwhd1yhkF6RQ5lBf+KmHA6Lu02B/+BHLKT9akhX8A
4yPx7RKLSPzQ4G58FEOgHLHG7vW06zqXdKVC/9Q/Py/YmL1/J4GMI7+rhrfW
wSWDkqb1qWxwapRvkRUiUOAl1fCRFW3QLus48vMsEwTx+5Fr+P3ICvx+5Ayu
/1OE6//E4/o/E+sHzsJ1omyzd5txPjKQToxzX/mZd1A+L+vU9Y18CC6JsSbn
gVSOHxBQP+WtU0YIS3Hu80FTQzuqqp2BXN6Uu+wSrwE0w7TITrETbMUrLTiT
mOjC3+9HruXT4FuXjZs/uT+OKrkJuAETLfoQ4Wrg3gGnudnrps3mgOaDsi3S
CUwk5mwb3xPMBOECG2ddLSacEk4l1tqzUNzomV0dwWyoLR1T9xD6DNZ3P1SJ
G7HRqKFR6exZBOhd9zZZda0RJNQKHTVMOGjR4+OXh1gEOP0QKNczrYBVeZGN
JfdoqHxlwef4bQgGbqkGihj3wGNVzdyQazQ02qs6OfrSNZ0ulbDU9ls9cDFr
eAlwacitsvOxJFEFJVo+u5PPd8PJeFV7f6dm1KmspaXwshEcTLo5ifO6wECG
0XVAqwV9uDj9913bdrAQynv4QqsTNg9tatXa14qk2BL+VskMOLVm8H0+jwAp
rz7biuY2tIz9aWipFhv2m5r9UlzOhrTJQyvu0z8jBddaGyc9AnT455VnzmDA
kUPHZtt1k7xo5GVHoA8X5gx1VOirtcLd5bcz7hUw0Y/7Uo9nSvPgo+NblQ0r
6iDl+aht5jM2clyTX83icmHeFnrCCtUP4Gh0N36zQhnKqXl729smH6KUXKT2
Le2Dr0faprz4XYq0mIxOH4anTuw6tcADJI++8Lz/oF5YGbJfJCCyX6kSfrR3
lC2/2gv0OadiC/eWozBp4mV2aAMIllwJOHqsB+7rq89ErhVI5oBzotiGNtAQ
arcVYHVBev8iZfFZlcjsxQPV5+sZsPPV47NLfnRC6IoAma+6n1C8gP7GP/k1
TYELbvzJq0msOaBXI1eDLivlLda5RIDb3K9n8uQ44JIUU6OsXIcWf3BumBLE
A9eHt/P+5CWWfNv88MdoA/rusUkrRoYPt37O3rSiuB3W9kbJX53fgkzj130f
HOBDXRJ/NDikEYY+P3M/IktHZ28emXYnhQ+/6BK7+ueS/n7nU+s9kUxkouS/
WbWd9Pt7CnS/9mfDSUpvkIX19gjrrZfSG2hgvcVhvZ2h9AaHJ+itldIbhGC9
TcN6W0nZJ4zb5zdsn7GUfcIYts9ubJ8ulH2C6wT7tKL2L2zC+/cj3r+B1P6F
JXj/VuD9q0HtX7iA9+87vH9/UngFDhivdmC8UqTwCjIxXnlgvPq+ihN1fSsf
NqoOWPRfK4OX2ld3T5ZmAIPCQ/DBeFiB8bDh8oG8P/lk/uL2m9+I08CL5nv7
T16ZSlr/cMMJHmxTbj/qGEEHO7XgbIH3NLBvZxR4OpF2oZKV6T/Agho1Ye8f
/jVgN9BbVH+D3Jd+lUrKe2ohfq8A3f9SI/BMLCq3LOHD65Np8TJ76bAppGtg
hloNLF3rkfUnDnV6RtKVP3EpUfrR4T/xKI2ff596HlEGwo23S88fqYDyZd8u
i93rhZO7mpk+BuWwdIh5JDexHuq5ArmrQnsgM0RsfwXZb7DGNPTk/lbQkP8S
eEGuG06v7PL1HPgI3eraSuwKOmxOyFwlo8+Hw2cqVDykPsHvCzMjA5+woIh3
UT9pOg9kjXSmiEyqgUstXLuo5QQ0vIqdwTrPAd27u+yEChuAd1Pq+mR+J0x+
6CrMvvcZxBX9rK1eNcOo4JWjZg18UF/1iDsW0gTHp+4PVontAOttl2Y7veRD
rozBCal9n+Aiytvwms6EdXWMGpvITgjb+HNy8EgeVEeO1KmYN4OEiNDZudX1
EJoXZHHucheoB7UdWjC/BY6tfZU660ErpB86f+3b2054NKKqr/RXK5TsEI2f
0k4HyaEVfe63uBAz9UDPrLg2kNE1WJ/jzYJjzvHswT42hOjvkU288xnoLlfl
9j7lgJ9euTt0MmBbi9XuaE0mjBxV2Cpe3AYKNvadLYIELF06/3HwHSb8cHD+
y9OeAT2r9b98OcKC6cpa4RFLWPDx19xlGp9YEFD6K9LQiA5Nuw7GSl/pQWtN
TarXBWQCSyLIRMqYBhW+nbJxQ11oelNMgXxKIxRpW67zN234t06aF64fVYPr
Ry2p7p7+OoSPTjpKXolckQGvz3tO2fWU8W/eyDJ8XxaI78tO4jr2R3H95wxc
/3m8/fyE9on17SNx3ebxdm3cHobbc3Hd+924nvM3XPd+YjsHt8+f+brxx0sW
Up096r1/JQc8zSMNRWxaQUVMKPl7PwvpOpbOMAvngHuaqqWdVTM8CFuQdiaT
jXZbFiZ6WRHgfvina8eVOnDOTcnMEOSgGzbbrbKDCUjd93ORq0INfHsW0NQx
nUDr1jaUq74loPepQWHKwUKwzz3y694lAi26cWDdX3kEPJtj6uYZ+QTiKHtA
E+3hmuBkH0vndmTceZiz/hkbrNIn3V91lQVhlJ2gjgl2cuXOYW+BtA4kFhVp
IxVAwKPv/bsvkuvOW8ym6ZsxkENg8aNM0v9u2iAhI72nGd5Q+xEN4f24Du/H
c9R+RD14P+rh/XiU2o9oFO/HD3g/ylP7Ebnj/ViH9yOs1GrP06tBIVv29ye+
J2CPrdK90g9sGEmfVTpmUYcUbdRXK5TxIHZ1RIQciW9Lt0B7/rZGNLvCq+yF
IR+8XLVzivraINonSy0lqgzCblvdYlRWwUqrmz129r2gTcmHm1i+OZY/RMkn
9wklPx7LV6bkgyiW743l+1ZprOkIbgFN0+zRldO7QGp+hRL3SQPsb1MZWfKM
BpNZ5xZHbH0Piss/pqLFPeBcI2IjLdQMP5DlC0HlGrAojT1Vt7wbPKn1gonr
dZlaFxhfl+j/d13g9IR1Ub2ScfF8OQMAQsZ6zj4Fw4UOm8WD+WD51HtuZSMD
1LT2xQkeLYG1ji/WypE4t8ms9HHpAAMUz/++VITqYFTlvcyTCB6EiR3kd/9g
Qp2+nGGPLgvc4lqXHV3AAEnK/kEF2/8NbP/3KTuHcTv3xHb+hbJn0h+g7HkM
2/MiCgfAEuNAPsYBF6sNu7Ou8kn/INT69XUE4q8y7226xgD3qycixabyIS9+
8dEPFjXwy3mGwhEPOhz8MMnHqonEa6l1+mrcOui0cjW7KUyHizPqhOzndAKv
S76ypa4VjLsvhPw63Qbr+nOy/yb9T9POJVHGb5lQlPmLLXy9HqxXQPK+HwS0
C79hWjpzQFx+w8ITQyVQR+EeyGHc+4pxj8fMT74n3AO0Iee5YqXlYFyqjSrM
msCeOh+RCz4fw/D5SFDnI0L4fFyGz8fxejK3cV2IT7guhDs1ftSPx6+Fx3+M
OpfRM3wuI3wuH/OjacSZEEgyY2bOnXskP3B6lJAz9+1/6pmvxfXMx9uX4PY1
uP1OmWDbmY8sNJTIfu1sz4H0Uc4y5ZMtsOfYSNuNIgaKj5Nwd+viwlrVhflr
9zSB+5lTmQ6HSFfHbor6h8xOiNWZ92vegQ9QbxBg9MCtAl5I3DVyWtIGtv6W
Cn/yz4WXRF/QnVMJY6o5TVl/MWBtNP1MoQAfgiheCnGYl9IwL31M8VJwx7z0
Eual5yleCuO89CLmpR8oXgrjvDQM89I1FC+FcV7agHmprrisO6O5CQ5PWyAY
GscHufOyVX/yLb9RfBXG+eokBsVXHXqU2Zsb20DPeKPVgzE+2KOxuw3JtXCR
0gNUYD0kYj3EL4/QEnNthm1zDyfyAxvBfZtRa6JsF5Q1mg+9Mm4B2yFlsf41
7fDomv/wn3x7v4ViArFnWsFOyN5QP4wBywt6S9YPEjAp9FZF9FgbON6Y660q
xwZdYUX6n3c6RvRWd65qG4i13ttsQzDh0FNb9yMJHBB7ZMS6Na8D1BPmmLBI
HvnDWXSJmRwD0t5mBz0bboe2cpdGtIoDrG0aX05nM+Ew5e/AuL8jjv2droRd
9VtX0iHc0mhyDulHDXW9MRyo/Ax3KD8IfmI/6BP2g8woO4FxO9HAdnK0oGNv
3ywmEGdjZexcaeD0/Xe0mgMXNLPGzr0bZIBAwx3jY+/rYcqybB93Kx7YFL9f
++c9zzXh19ublDtgDt/F9c+7nu9ieic2rWBC8srzQz96W+FdxV67gT0EPB1L
juQXMuGIf1F2hg0T6r8tV7mwlQl9v/uid95gwuUI6RTDmQz4FLYorustC05S
fi7EYj+3Bfu5yhLn9++ayQKto57itwNJ3NMXCNXIpMMhyv+F39j/3Yb930hq
v8Ag3i+5eL8wvRRnuA+ywSItnb5AjQuz1svX2gRUwF/h4Ze3dXVCcPzswe9J
teC1eE/SLWM6ePxWcazv54GzbryPG78NBBU2nrtT0gp76lhbn3G4cJJnM6f9
OBMeWC4ccbBuAKe1RbuDhLngNeiwN2oTB8oKg+a6DZZBrduloA3bemBUyXNH
ykAhCNrqbfEbaQKRWdZFhEMXSDvPUdop1wL7RbL37FtaD9fMF+6IpPFgvatE
VvsYEwyOdzpPm1EBeiNPJt2c0gvBFgkFUyfVwd03Nj79X4vhOhWfgac4PhOM
4zMelByki+XIYjl4nMgHj/M+Hid9Av6M49Im6rvoCf6uE/7uUspPQabYTzHD
fkpJ/YMQo0jSfvWSmCtJ/zG5ataBv75kwyiyloRBFqSm9f66786DykIPsXOk
X2VD4TzqwDhPyFE4/1kpxjLJjkDmZ5HkM1sCbEN0Hn4tKISbzXV7e963w/mS
2QG9HD5Iy9eK3CuugX0bDNbPH2JCrP9V+UTbP9+1UA6RLIRTXs4KjC8skPPk
5fr6ccAxJHSvwtVm+GpnE8pczoY5THf1E60cUE/MFDG81wTnKB4I4zwwB/PA
iXWG6zF/HhlQrPM9xEVS4dsd4zew4fLP7IWtUdWgqNTSXpnOQTO97AzrSD5j
6BjRbP+4BL5V/SiTfUVHaUVCWa/OkLxoVGaBpXoFLC8tmVVAZyJN5RtZB0k/
Zed3H7njpJ9ygJoXisHzeoLn9ZWSAy+wHF8sZxH1XZiNv2uDv2suOXP7GMmD
1bV3PP3uxoWyssVCSWKvQXLD78eCERzwrnUMHSPbE0JeuvjNeg3D1LxgHp5X
EJ7XYa6oYI8dAZdLgj+ak+uyM3D7Drm3hbBTSHB+nyYBAhK7065VErD5RF9m
XlAOXNplmXzDuA/mNpSf1dTMhJi1QdV1haUw62dpUhPqhTjNT4+Ktcvh3DXG
E151CbhT/ZE57n8Z959N9UfpuP923H/iutTiddFxfb1VV488x9cOV+wOY0Oy
Ogxs/l0FB78/07xPEEiEe9dRI58DYTSnufZFH/71L8b/t9WP/YtsXIfWFNdB
PYzroDrgOrTTcb3TWFzv9ILP2yluBQT64hWWSlcjQDSB2f/sdgEkaxQ/7m7h
oMl9Mu51Hwjw+Dt5rEKxCK6I7ToQ2EugkPuGdr90CLCKFUvcXJcMHZs/ThK8
xUW1Q13fk0M5sPTAqcw5M9OA+/1j5gwrNjobYDRzSRgP1nRblxzsS4enlHyY
guVHYPlHPxVJcVJZ0FtudMt0YSc4Jyf+5j1Nh02UfiAc66ce68eC0g8IYf2U
Yv2cpuLDEIbjw/MrqPjwLa9/5gs0H2q+7CfUfCfWO7XDdUev4/Zg3H4Yt58c
jrwrQNrhu9mXq3+Rdlhs0u6mJ/oaAreeAI4JAWcN1GW2kzyKu231pFsSb0Et
rPOZsGcPCEclpSrtboS70h7BzyqKoFH9lP9YBxd162d4RyziwCFzk6EHkq8h
dba8xs1tBEq0SXE3bCBgUPtM+pSVr/7jn0ZgP7Qm1Hkqu5GNiKmZJneuk36o
fq6n6LJaeEmd12jieZ1+K+6ubhsLDceYCm6dwoMIDcMTO2UrIcf7nYvnzFqk
ZWVgqRTKBUPVMrpSCgtOU7wFjfOWw5i39FVtF15dR/ZLfj7DdwuHxD2lN/yb
aVAydW+CUg4PCIEC3b9U2LBq//qXYxEZgG6utpa4QPrv0WtunQlnQK6591wf
EwTXGj1TXVg8RH+wLm0NiwVnu1t/dohl/6cu6DVc13HKGc6+FE1yXwzn3PpA
7t/dBjOzWYE5/8bPi/8/8XNRHD/nqR72OH6OjUSCOqqElAi40WakecC3AeZN
uPefhu/9Tay6J89raEF0q/NZnK98WLtj/3P9jAZYb/juzmvLNlRU4CDY3ceH
h1t+TTmXWwenqDgPGo/z5OA4Twh1LqDxc0EKnwvllH5gL9bPkn2UfgIo/UAN
1k8t1s8yyq7QCmxXTtiuFKi4GfLAcTNmBxU3m2jnR7A9+yQe5Ksv44Cps/r+
mdEEPFxY4XFmRjUQlH5gXD+3sH5CLW9mPYwg+dc7QgcFsCDD6+MUoZu1YANO
txLE+qD2nJzBrshCGD5b/Dv9QikYSlaZTbFiw46TIxnLSByYugSt9yJx4ASF
G7BnmMKNORYUbjx4sHNxKq0b+laINBZnNIMbx0Em6CmJeykhsat+EujBqInu
bG0C8n6bv/fxjoe76262ocef0Z3njKHDNXxIuZkTOi2/GiysO6br/GDBxYRA
NbEBkueXm8tq8pLGeSkKw7z0G+al+hSfR+N8XgbzeUlf29XzWtmwkHVUCLkR
JF+dbaZoWQvaVXdit70g/YwUxaovqiw4sYAzlR1aB56Uv4neY39zEPubMyge
hZZiHmWIedT4vfn5CfXQzCn+hhwxfwvA/G28/7kJ/cMpvxvVY7/7Ava7U+Of
7fVVZaFfGYsaF5WwQHRalE/sDjqoUHwVbcB89QLmqzQq3otCcLzXGcd7x++t
vPC91XJ8bzV+3y2B77td8X039pfRLuwvv8L+chhlP2gjtp8YbD8T78XG66rN
o+Ko6DeOo67CcVQPUTHZkD0sZGY4q96F5NdT40Q9j/V9hqni7+/zhZuR+Anp
T4dK+MDa6tcv600jzxUKTxwwnlzEeHKAio/BfBwfu7yEio8pzFhnLEvi+M45
ByIKIwgINzQSNb6bAg57oh0rogiU5HJMv/JPPZxZSfExd+Ig+N6GKneShxTf
QuzPNA5czz0W5a8XDd5UO/qM208+oNon4ps7Hk/wxy7RY3cJJN9emOEaScDU
2e1s9XspsDqDs+PaIwKOlbsVzye/e/nyDauZ5Hfn+yy+fLqWC7WK3fK3DTmw
hd7p6XE6DfTi1sSlkefpxi7VqVfJ8zRM1vFBemI6JIa6Di0nzy/3+ax+Dnl+
ufQUu+bOeA11dlZ7/9T5KVXd7Pmnzo/yvCP5AWFxEKC88dboTS5ccTw67SO5
T2Uc29nWP1Oh9Pm9OZYkH4huDWtQ/1PHbODoQXpVMkxS+ac/+nWa6q9+muq/
8snSR2KkPtfnx2g2kfq8Pnl55vOQFLBMjcz2v0cgj3YtZQuyPd126LldRAqk
yNt+yvnOAquAOeVXyP3rOxIz9yInCeIfC/P9yPNxn16PdCB5Ps4fvs6cL0ee
jz21jV2kfjT7dCxe3idAcHdiwVBoHIAVd7iU5O0POcXL3EncmPz0gVqMVzw8
3bLmmvxDAj53vTm8+jEBftxseEH4w6dGe83kUR564Hp0VKGUBW8SVq/rD3gN
pybwqHuYRyU0rczKCyRQ3YaIMn4aaS9q/l5aMdHQYHh/UhWp/3x/iah9pP6z
dKoPbU1JB7mK8ofPSFyCJWEuGV95AAej7411JwGfigshAseFtHBc6BIV10JO
OK4lguNaVlT8Ck3H8SsGjl/1TOK8lvUjkIXJ0037tlUCp/9qfro3BzLN96gF
GBHoh+FDz+L8Jkj7aPgUnrHg2OzLV2NqGUjObd1qb8EkaF7cLcbz40OiUWvg
51YGKpyXKe21pQQu9toE2fM6oUjKXnrqAANtGSmLNq6sg6Q7cz55kLi+65eI
+9cFTHR8xeZTMmtaQTLNOewsud4bt3xY8DSAhr6or97+IzoKqqQkVUQDeuBq
0nWby89oaC/36OTw7e9Bzze5LXhxD+xcWLPFfFIzCqy8GPqXRg2cPtgSILm8
GwbfmSlZhDUjWKAjK3GQBsPr1/E0X/ChOUUyU8KhBaHZJScnE5/h1JyBw/Oy
eHBntOiUzVgp2tolWx5HCwJnk59fnQ73gc/f2/WLF5eha4ojVVHub8E2vx8J
yPZBxm0ZSYuQMhStrWjVzKmCy5M+rgmz64UNp3vkRWJoEL0sQn/rUBakHT6x
8MCRHpi+ag5z9C4dZNnCdpYaXBi6dLjQbqgNXN28o7oqGOAhaxSe0JIJG0IX
2uqS57qu6VZjh1YSj6sU1F3eVYB72+Lk57GdIG6QtqhvGg+JbD0Hhb8ZENA0
UpOq1gjlJcdtL50oRzrKS8uHDzSCy0V959/QA8h8YY9IRAXa77214uaXNtJf
FZs8Ob0Lsi40G83WrESnnH3R9gAGNFSma95FnbCZup9C4/dTAvh+qoiSD9pY
viuWn0vJB3MsfwzLf0nJh5NYfiOW7/jdPFv4cTM889r+yE6bBks+GazOS+dD
38lPvAt+LSBaGDd6Iu8zREakh6jl8eCTaqXIOxUm1NDEpkmItILd3KD8ueS+
nUPpAaZhPURjPTz5H3nj47yuF/M6EczrPHD+8w6c56yK85yv4Pznnbh9NW4f
z5tVwXmzvThvNul/5FkN4/82ZuP/Nprh/zb+SPGTb5jBQyXmk16dHWSD46aX
kkYZGSA6f9Z86e8E+vnC2E/KgIBtvOlZb+sj/+f57v75+fdQvzKwcs9VF7pT
Bn0LOwq803tBZL/1oylzy0FtTetv/65aWCb9vqO1vQeaZtWvXtlTDt9mJdX1
ttPg9qevTydldoPF5GkyOaIfgZYrve7k35/h7B2zjGWbuqBdhX1KI6gSxHfP
2HGTYMCyBxs731zqhFFlqy/15Pel4y9KNuZ3goVustjAuQ6YFZhe6W/QDHd3
q7WeI3Fm4/7jRaufdcGj/pI1LEYzLN7u6xbY2wwX1s8+X6vNh33yzjmlr1qg
02qNmYZnByjpaHupOvPgJ46/Pcfxt7c4/ia0a3Kp0jkCPd2bOaC3uQa0ztHE
fOU5EF4QdW/XRgJ1c7MuX2+jgWz4g8ZeaxbMN6m461zNQL5WoScjdheAprCJ
StZOPqxxYkqP0RlosczrxJTqSlj9JnEs4WIn7L2/hP/oFwMlZn6rCS1vALe+
FW8eL+BBvKzfAllVJkoqFJXcLtYGqgOeQqk7CFBqWpfIvkdDJiqzJV7syYUB
N0k6fX8PPD9f2MFqoiHF6pb3jFkVkDI5OMYuoxsiPPQFAjc1I0XH+kqZkTrw
bp8/ozypCwxZAgn0T81IK//SuUGRFujdPl3muxYfjDpmHlt9uwU1B14si0zs
AOtf623bHHkwmSVY/VqDjYS8kw+KfuaCeqpz7K7ZFRB0vVM8fGEZKvyqePBw
Zg5YmnTdOqXRB8eNEgpjXcvQyVnElftBZZDkniP961UviN5k7CufRuJG/gmZ
puFaqD1KFw9v64FWyk7QRDuxpuwEtWA7OYPthEHZCRq3k6XYTgRU/rETNG4n
+7GdGH3Plv8ZRQPFI3FL/47JhTPdc+M45j0g+DuV0LjPAykVpx3hbiygxay+
6qBZBmnLP7usrOpGZkLTbX3zP4GmrbS6I78RBrPdNx+y4CNHi4tnjeuLodJX
9s2QNgPkc6sTnMII9JzR+b5u6B2syy5/Xr2RACZ+zxKJ37M04vcsR/H7QQf8
3mcrfu+ToC+paXuVhZ4pOE8SKWJD0gXkNabcDqfrZuXdV25HUU6DAxbn2YAa
o+/81cgCzweySk7v6bBH25IXZ8WFt6LDez+Kt4FofkV3fyUD5jF3Wp/wLQAD
4WG1c7v4YPvxUsyddgb0vGlxozEr4dagWFUGqTdpavyQhMe/AY9/Ls47vYPz
Tj/ivNOJfugk7IdiHEOmGMfUMI4lTcDJcbw6plCWcGxDO/jSDaRr7NjwVq8m
u6mdBV4rO+8c72TClusnskWHmbB0S0PgPB8GPKb0A0+xfl5g/UyMJz/CeOV1
0nhQ0pYPxAoBOe0txfD3cueV1joMqJZ1kjJ/0wmdYna7eTsaoMfOWqzDrwNS
qHWHjXjdjfC6F+J7/KX4Hj8C3+O7T8Dt8fcs7AnvQGXxO9BJlL2hRdjeUrG9
aWKcl8Y4/w3jfK9JtuWyIjqaemZtqvx+LoxMe968R6ntP/GNUzi+YYn9Slfs
V3pjv7KWmi/qw/PtwPMdvVR4aGoHE4lJBt4+PY0F73qSXaI9GPBswvlSgNfr
JY7/JOD4zxCO/0z0f9Ox//t/76TeBg==
    "]],
  AutomaticImageSize->True,
  Axes->True,
  BoxRatios->{1, 1, 0.4},
  ImageSize->{410.4769360270534, 317.07330103771443`},
  Method->{"RotationControl" -> "Globe"},
  PlotRange->
   NCache[{{0, Rational[1, 2] Pi}, {0, Pi}, {0., 3.141592653589793}}, {{
     0, 1.5707963267948966`}, {0, 3.141592653589793}, {0., 
     3.141592653589793}}],
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  ViewPoint->{1.676718420407828, -2.320222437527951, 1.8042126202465527`},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{3.4975909146831837`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ArcCos", "[", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Cot", "[", "\[Theta]", "]"}]}], " ", 
    RowBox[{"Tan", "[", "\[Alpha]", "]"}]}], "]"}], "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\[Alpha]", "\[Rule]", 
     RowBox[{
      FractionBox["22.5", "180"], "\[Pi]"}]}], ",", 
    RowBox[{"\[Theta]", "\[Rule]", 
     FractionBox["\[Pi]", "2"]}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.4975909465610075`*^9, 3.497590989698475*^9}}],

Cell[BoxData[
 FractionBox["\[Pi]", "2"]], "Output",
 CellChangeTimes->{{3.497590984855198*^9, 3.4975909900094924`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"ArcCos", "[", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Cot", "[", "\[Theta]", "]"}]}], " ", 
       RowBox[{"Tan", "[", "\[Alpha]", "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "\[Pi]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "\[Pi]"}], "}"}]}], "}"}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", ",", "0", ",", 
     RowBox[{"\[Pi]", "/", "2"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.497591027307626*^9, 3.4975911205029564`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 0.2827433388230814, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`\[Alpha]$$], 0, Rational[1, 2] Pi}}, 
    Typeset`size$$ = {360., {112., 116.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`\[Alpha]$1555$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`\[Alpha]$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$1555$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        ArcCos[(-Cot[$CellContext`\[Theta]]) 
         Tan[$CellContext`\[Alpha]$$]], {$CellContext`\[Theta], 0, Pi}, 
        PlotRange -> {{0, Pi}, {0, Pi}}], 
      "Specifications" :> {{$CellContext`\[Alpha]$$, 0, Rational[1, 2] Pi}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{409., {158., 163.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.497591083013812*^9, 3.497591120993984*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ArcCos", "[", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Cot", "[", 
          RowBox[{"\[Theta]", " ", "\[Degree]"}], "]"}]}], " ", 
        RowBox[{"Tan", "[", 
         RowBox[{"\[Alpha]", " ", "\[Degree]"}], "]"}]}], "]"}], "/", 
      "\[Pi]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", "0", ",", "180"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "180"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", ",", "0", ",", "90"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.497591150610678*^9, 3.4975911742000275`*^9}, {
  3.497591206632882*^9, 3.497591226594024*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 12.8, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`\[Alpha]$$], 0, 90}}, Typeset`size$$ = {
    360., {115., 119.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$5773$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`\[Alpha]$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$5773$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[ArcCos[(-Cot[$CellContext`\[Theta] Degree]) 
          Tan[$CellContext`\[Alpha]$$ Degree]]/
        Pi, {$CellContext`\[Theta], 0, 180}, PlotRange -> {{0, 180}, {0, 1}}],
       "Specifications" :> {{$CellContext`\[Alpha]$$, 0, 90}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{409., {161., 166.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.4975911607452583`*^9, 3.4975911746990557`*^9}, 
   3.4975912274080706`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"When", " ", "changing", " ", "season"}], ",", " ", 
  RowBox[{
  "the", " ", "plane", " ", "is", " ", "rotating", " ", "along", " ", "the", 
   " ", "axis", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], ",", "0", ",", 
     RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"The", " ", "normal", " ", "vector", " ", "is", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", "\[Alpha]", "]"}], 
     RowBox[{"Cos", "[", "\[Beta]", "]"}]}], ",", 
    RowBox[{"Sin", "[", "\[Beta]", "]"}], ",", 
    RowBox[{
     RowBox[{"Sin", "[", "\[Alpha]", "]"}], 
     RowBox[{"Cos", "[", "\[Beta]", "]"}]}]}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.4975917314338994`*^9, 3.4975918441073437`*^9}, {
  3.497592388807499*^9, 3.4975923909176197`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot3D", "[", " ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SqrtBox[
        RowBox[{"1", "-", 
         SuperscriptBox["x", "2"], "-", 
         SuperscriptBox["y", "2"]}]], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], 
         FractionBox[
          RowBox[{
           RowBox[{"Cos", "[", "\[Beta]", "]"}], "x"}], 
          RowBox[{
           RowBox[{"Sin", "[", "\[Alpha]", "]"}], 
           RowBox[{"Cos", "[", "\[Beta]", "]"}]}]]}], "-", 
        FractionBox[
         RowBox[{
          RowBox[{"Sin", "[", "\[Beta]", "]"}], "y"}], 
         RowBox[{
          RowBox[{"Sin", "[", "\[Alpha]", "]"}], 
          RowBox[{"Cos", "[", "\[Beta]", "]"}]}]]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "1"}], ",", 
     RowBox[{"BoxRatios", "\[Rule]", "1"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", ",", "0", ",", 
     FractionBox["\[Pi]", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Beta]", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4975932667827168`*^9, 3.4975934382415233`*^9}, {
  3.4975935522560444`*^9, 3.497593589926199*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 
    0.3235840433197487, $CellContext`\[Beta]$$ = 0.9299114254625788, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`\[Alpha]$$], 0, Rational[1, 2] Pi}, {
      Hold[$CellContext`\[Beta]$$], 0, 2 Pi}}, Typeset`size$$ = {
    310., {161., 164.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$181042$$ = 
    0, $CellContext`\[Beta]$181043$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`\[Alpha]$$ = 0, $CellContext`\[Beta]$$ = 
        0}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$181042$$, 0], 
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$181043$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot3D[{(1 - $CellContext`x^2 - $CellContext`y^2)^
         Rational[
          1, 2], (-Cos[$CellContext`\[Alpha]$$]) (
           Cos[$CellContext`\[Beta]$$] $CellContext`x/(
           Sin[$CellContext`\[Alpha]$$] Cos[$CellContext`\[Beta]$$])) - 
         Sin[$CellContext`\[Beta]$$] $CellContext`y/(
         Sin[$CellContext`\[Alpha]$$] 
         Cos[$CellContext`\[Beta]$$])}, {$CellContext`x, -1, 
         1}, {$CellContext`y, -1, 1}, PlotRange -> 1, BoxRatios -> 1], 
      "Specifications" :> {{$CellContext`\[Alpha]$$, 0, Rational[1, 2] 
         Pi}, {$CellContext`\[Beta]$$, 0, 2 Pi}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{359., {220., 225.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.497593368010506*^9, {3.497593412772066*^9, 3.497593438653547*^9}, 
   3.4975935916502976`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Power", "::", "\<\"infy\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Infinite expression \\\\\\\"\
\\\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(1\\/0\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" encountered.\\\\\\\"\\\
\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\
\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/infy\\\", ButtonNote -> \
\\\"Power::infy\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.4975935919283133`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Power", "::", "\<\"infy\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Infinite expression \\\\\\\"\
\\\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(1\\/0\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" encountered.\\\\\\\"\\\
\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\
\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/infy\\\", ButtonNote -> \
\\\"Power::infy\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.4975935919603157`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Infinity]", "::", "\<\"indet\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Indeterminate expression \
\\\\\\\"\\\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(0\\\\ \
ComplexInfinity\\), \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" \
encountered.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/indet\\\", ButtonNote -> \
\\\"Infinity::indet\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.497593591987317*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Power", "::", "\<\"infy\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Infinite expression \\\\\\\"\
\\\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(1\\/0\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" encountered.\\\\\\\"\\\
\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\
\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/infy\\\", ButtonNote -> \
\\\"Power::infy\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.497593592024319*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"General", "::", "\<\"stop\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Further output of \\\\\\\"\\\
\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(Power :: \\\"infy\\\"\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" will be suppressed \
during this calculation.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/stop\\\", ButtonNote -> \
\\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.4975935920653214`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Infinity]", "::", "\<\"indet\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Indeterminate expression \
\\\\\\\"\\\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(0\\\\ y\\\\ \
ComplexInfinity\\), \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" \
encountered.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/indet\\\", ButtonNote -> \
\\\"Infinity::indet\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.4975935921023235`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot3D", "::", "\<\"legacycolfunc\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Use ColorFunction to specify \
coloring.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\
\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Plot3D\\\", ButtonNote -> \
\\\"Plot3D::legacycolfunc\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.4975935921313252`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"the", " ", "plane", " ", "is"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", "\[Alpha]", "]"}], 
     RowBox[{"Cos", "[", "\[Beta]", "]"}], 
     RowBox[{"Sin", "[", "\[Theta]", "]"}], 
     RowBox[{"Cos", "[", "\[Phi]", "]"}]}], "+", 
    RowBox[{
     RowBox[{"Sin", "[", "\[Beta]", "]"}], 
     RowBox[{"Sin", "[", "\[Theta]", "]"}], 
     RowBox[{"Sin", "[", "\[Phi]", "]"}]}], "+", 
    RowBox[{
     RowBox[{"Sin", "[", "\[Alpha]", "]"}], 
     RowBox[{"Cos", "[", "\[Beta]", "]"}], 
     RowBox[{"Cos", "[", "\[Theta]", "]"}]}]}], "\[Equal]", "0"}]}]], "Input",
 CellChangeTimes->{{3.4975918503937035`*^9, 3.4975918952202673`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Cos", "[", 
        RowBox[{"\[Alpha]", " ", "\[Degree]"}], "]"}], 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Beta]", " ", "\[Degree]"}], "]"}], 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]", " ", "\[Degree]"}], "]"}], 
       RowBox[{"Cos", "[", "\[Phi]", "]"}]}], "+", 
      RowBox[{
       RowBox[{"Sin", "[", 
        RowBox[{"\[Beta]", " ", "\[Degree]"}], "]"}], 
       RowBox[{"Sin", "[", 
        RowBox[{"\[Theta]", " ", "\[Degree]"}], "]"}], 
       RowBox[{"Sin", "[", "\[Phi]", "]"}]}], "+", 
      RowBox[{
       RowBox[{"Sin", "[", 
        RowBox[{"\[Alpha]", " ", "\[Degree]"}], "]"}], 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Beta]", " ", "\[Degree]"}], "]"}], 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Theta]", " ", "\[Degree]"}], "]"}]}]}], "\[Equal]", "0"}], 
    ",", "\[Phi]"}], "]"}], "//", "Simplify"}]], "Input",
 CellChangeTimes->{{3.497591899360504*^9, 3.4975919210067425`*^9}, {
  3.497593789181596*^9, 3.497593804967499*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "::", "\<\"ifun\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Inverse functions are being \
used by \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(Solve\\), \\\"MT\\\"]\\)\
\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\", so some solutions may not be found; \
use Reduce for complete solution information.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\
\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/Solve/ifun\\\", \
ButtonNote -> \\\"Solve::ifun\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.4975919127132683`*^9, 3.497591921890793*^9}, 
   3.497592330210148*^9, 3.4975938067906027`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Phi]", "\[Rule]", 
     RowBox[{"-", 
      RowBox[{"ArcCos", "[", 
       RowBox[{"-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", 
            SuperscriptBox[
             RowBox[{"Cos", "[", 
              RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"], " ", 
            RowBox[{"Cot", "[", 
             RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], " ", 
            RowBox[{"Sin", "[", 
             RowBox[{"2", " ", "\[Degree]", " ", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{
            SqrtBox["2"], " ", 
            SuperscriptBox[
             RowBox[{"Csc", "[", 
              RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], "2"], " ", 
            RowBox[{"\[Sqrt]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"2", "+", 
                 RowBox[{"2", " ", 
                  RowBox[{"Cos", "[", 
                   RowBox[{"2", " ", "\[Degree]", " ", "\[Alpha]"}], "]"}]}], 
                 "+", 
                 RowBox[{"Cos", "[", 
                  RowBox[{"2", " ", "\[Degree]", " ", 
                   RowBox[{"(", 
                    RowBox[{"\[Alpha]", "-", "\[Beta]"}], ")"}]}], "]"}], "-", 
                 RowBox[{"2", " ", 
                  RowBox[{"Cos", "[", 
                   RowBox[{"2", " ", "\[Degree]", " ", "\[Beta]"}], "]"}]}], 
                 "+", 
                 RowBox[{"Cos", "[", 
                  RowBox[{"2", " ", "\[Degree]", " ", 
                   RowBox[{"(", 
                    RowBox[{"\[Alpha]", "+", "\[Beta]"}], ")"}]}], "]"}], "-", 
                 RowBox[{"4", " ", 
                  RowBox[{"Cos", "[", 
                   RowBox[{"2", " ", "\[Degree]", " ", "\[Theta]"}], 
                   "]"}]}]}], ")"}], " ", 
               SuperscriptBox[
                RowBox[{"Sin", "[", 
                 RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"], " ", 
               SuperscriptBox[
                RowBox[{"Sin", "[", 
                 RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], "2"]}], 
              ")"}]}]}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"4", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              SuperscriptBox[
               RowBox[{"Cos", "[", 
                RowBox[{"\[Degree]", " ", "\[Alpha]"}], "]"}], "2"], " ", 
              SuperscriptBox[
               RowBox[{"Cos", "[", 
                RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"]}], "+", 
             SuperscriptBox[
              RowBox[{"Sin", "[", 
               RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"]}], ")"}]}], 
          ")"}]}]}], "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Phi]", "\[Rule]", 
     RowBox[{"ArcCos", "[", 
      RowBox[{"-", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", 
           SuperscriptBox[
            RowBox[{"Cos", "[", 
             RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"], " ", 
           RowBox[{"Cot", "[", 
            RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], " ", 
           RowBox[{"Sin", "[", 
            RowBox[{"2", " ", "\[Degree]", " ", "\[Alpha]"}], "]"}]}], "+", 
          RowBox[{
           SqrtBox["2"], " ", 
           SuperscriptBox[
            RowBox[{"Csc", "[", 
             RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], "2"], " ", 
           RowBox[{"\[Sqrt]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"2", "+", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", 
                  RowBox[{"2", " ", "\[Degree]", " ", "\[Alpha]"}], "]"}]}], 
                "+", 
                RowBox[{"Cos", "[", 
                 RowBox[{"2", " ", "\[Degree]", " ", 
                  RowBox[{"(", 
                   RowBox[{"\[Alpha]", "-", "\[Beta]"}], ")"}]}], "]"}], "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", 
                  RowBox[{"2", " ", "\[Degree]", " ", "\[Beta]"}], "]"}]}], 
                "+", 
                RowBox[{"Cos", "[", 
                 RowBox[{"2", " ", "\[Degree]", " ", 
                  RowBox[{"(", 
                   RowBox[{"\[Alpha]", "+", "\[Beta]"}], ")"}]}], "]"}], "-", 
                RowBox[{"4", " ", 
                 RowBox[{"Cos", "[", 
                  RowBox[{"2", " ", "\[Degree]", " ", "\[Theta]"}], "]"}]}]}],
                ")"}], " ", 
              SuperscriptBox[
               RowBox[{"Sin", "[", 
                RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"], " ", 
              SuperscriptBox[
               RowBox[{"Sin", "[", 
                RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], "2"]}], 
             ")"}]}]}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"4", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             SuperscriptBox[
              RowBox[{"Cos", "[", 
               RowBox[{"\[Degree]", " ", "\[Alpha]"}], "]"}], "2"], " ", 
             SuperscriptBox[
              RowBox[{"Cos", "[", 
               RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"]}], "+", 
            SuperscriptBox[
             RowBox[{"Sin", "[", 
              RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"]}], ")"}]}], 
         ")"}]}]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Phi]", "\[Rule]", 
     RowBox[{"-", 
      RowBox[{"ArcCos", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "2"}], " ", 
           SuperscriptBox[
            RowBox[{"Cos", "[", 
             RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"], " ", 
           RowBox[{"Cot", "[", 
            RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], " ", 
           RowBox[{"Sin", "[", 
            RowBox[{"2", " ", "\[Degree]", " ", "\[Alpha]"}], "]"}]}], "+", 
          RowBox[{
           SqrtBox["2"], " ", 
           SuperscriptBox[
            RowBox[{"Csc", "[", 
             RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], "2"], " ", 
           RowBox[{"\[Sqrt]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"2", "+", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", 
                  RowBox[{"2", " ", "\[Degree]", " ", "\[Alpha]"}], "]"}]}], 
                "+", 
                RowBox[{"Cos", "[", 
                 RowBox[{"2", " ", "\[Degree]", " ", 
                  RowBox[{"(", 
                   RowBox[{"\[Alpha]", "-", "\[Beta]"}], ")"}]}], "]"}], "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", 
                  RowBox[{"2", " ", "\[Degree]", " ", "\[Beta]"}], "]"}]}], 
                "+", 
                RowBox[{"Cos", "[", 
                 RowBox[{"2", " ", "\[Degree]", " ", 
                  RowBox[{"(", 
                   RowBox[{"\[Alpha]", "+", "\[Beta]"}], ")"}]}], "]"}], "-", 
                RowBox[{"4", " ", 
                 RowBox[{"Cos", "[", 
                  RowBox[{"2", " ", "\[Degree]", " ", "\[Theta]"}], "]"}]}]}],
                ")"}], " ", 
              SuperscriptBox[
               RowBox[{"Sin", "[", 
                RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"], " ", 
              SuperscriptBox[
               RowBox[{"Sin", "[", 
                RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], "2"]}], 
             ")"}]}]}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"4", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             SuperscriptBox[
              RowBox[{"Cos", "[", 
               RowBox[{"\[Degree]", " ", "\[Alpha]"}], "]"}], "2"], " ", 
             SuperscriptBox[
              RowBox[{"Cos", "[", 
               RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"]}], "+", 
            SuperscriptBox[
             RowBox[{"Sin", "[", 
              RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"]}], ")"}]}], 
         ")"}]}], "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Phi]", "\[Rule]", 
     RowBox[{"ArcCos", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "2"}], " ", 
          SuperscriptBox[
           RowBox[{"Cos", "[", 
            RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"], " ", 
          RowBox[{"Cot", "[", 
           RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], " ", 
          RowBox[{"Sin", "[", 
           RowBox[{"2", " ", "\[Degree]", " ", "\[Alpha]"}], "]"}]}], "+", 
         RowBox[{
          SqrtBox["2"], " ", 
          SuperscriptBox[
           RowBox[{"Csc", "[", 
            RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], "2"], " ", 
          RowBox[{"\[Sqrt]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"2", "+", 
               RowBox[{"2", " ", 
                RowBox[{"Cos", "[", 
                 RowBox[{"2", " ", "\[Degree]", " ", "\[Alpha]"}], "]"}]}], 
               "+", 
               RowBox[{"Cos", "[", 
                RowBox[{"2", " ", "\[Degree]", " ", 
                 RowBox[{"(", 
                  RowBox[{"\[Alpha]", "-", "\[Beta]"}], ")"}]}], "]"}], "-", 
               RowBox[{"2", " ", 
                RowBox[{"Cos", "[", 
                 RowBox[{"2", " ", "\[Degree]", " ", "\[Beta]"}], "]"}]}], 
               "+", 
               RowBox[{"Cos", "[", 
                RowBox[{"2", " ", "\[Degree]", " ", 
                 RowBox[{"(", 
                  RowBox[{"\[Alpha]", "+", "\[Beta]"}], ")"}]}], "]"}], "-", 
               RowBox[{"4", " ", 
                RowBox[{"Cos", "[", 
                 RowBox[{"2", " ", "\[Degree]", " ", "\[Theta]"}], "]"}]}]}], 
              ")"}], " ", 
             SuperscriptBox[
              RowBox[{"Sin", "[", 
               RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"], " ", 
             SuperscriptBox[
              RowBox[{"Sin", "[", 
               RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], "2"]}], 
            ")"}]}]}]}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"4", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            SuperscriptBox[
             RowBox[{"Cos", "[", 
              RowBox[{"\[Degree]", " ", "\[Alpha]"}], "]"}], "2"], " ", 
            SuperscriptBox[
             RowBox[{"Cos", "[", 
              RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"]}], "+", 
           SuperscriptBox[
            RowBox[{"Sin", "[", 
             RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"]}], ")"}]}], 
        ")"}]}], "]"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.49759191275227*^9, 3.49759192569001*^9}, 
   3.4975923337803516`*^9, 3.4975938123119187`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ArcCos", "[", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"Cos", "[", 
              RowBox[{"\[Alpha]", " ", "\[Degree]"}], "]"}], " ", 
             SuperscriptBox[
              RowBox[{"Cos", "[", 
               RowBox[{"\[Beta]", " ", "\[Degree]"}], "]"}], "2"], " ", 
             RowBox[{"Cot", "[", 
              RowBox[{"\[Theta]", " ", "\[Degree]"}], "]"}], " ", 
             RowBox[{"Sin", "[", 
              RowBox[{"\[Alpha]", " ", "\[Degree]"}], "]"}]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"Csc", "[", 
               RowBox[{"\[Theta]", " ", "\[Degree]"}], "]"}], "2"], " ", 
             RowBox[{"\[Sqrt]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "+", 
                  RowBox[{"2", " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"2", " ", "\[Alpha]", " ", "\[Degree]"}], " ", 
                    "]"}], " ", 
                   SuperscriptBox[
                    RowBox[{"Cos", "[", 
                    RowBox[{"\[Beta]", " ", "\[Degree]"}], "]"}], "2"]}], "-", 
                  RowBox[{"Cos", "[", 
                   RowBox[{"2", " ", "\[Beta]", " ", "\[Degree]"}], "]"}], 
                  "-", 
                  RowBox[{"2", " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"2", " ", "\[Theta]", " ", "\[Degree]"}], 
                    "]"}]}]}], ")"}], " ", 
                SuperscriptBox[
                 RowBox[{"Sin", "[", 
                  RowBox[{"\[Beta]", " ", "\[Degree]"}], "]"}], "2"], " ", 
                SuperscriptBox[
                 RowBox[{"Sin", "[", 
                  RowBox[{"\[Theta]", " ", "\[Degree]"}], "]"}], "2"]}], 
               ")"}]}]}]}], ")"}]}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            SuperscriptBox[
             RowBox[{"Cos", "[", 
              RowBox[{"\[Alpha]", " ", "\[Degree]"}], "]"}], "2"], " ", 
            SuperscriptBox[
             RowBox[{"Cos", "[", 
              RowBox[{"\[Beta]", " ", "\[Degree]"}], "]"}], "2"]}], "+", 
           SuperscriptBox[
            RowBox[{"Sin", "[", 
             RowBox[{"\[Beta]", " ", "\[Degree]"}], "]"}], "2"]}], ")"}]}], 
        "]"}], ",", 
       RowBox[{"-", 
        RowBox[{"ArcCos", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "2"}], " ", 
             SuperscriptBox[
              RowBox[{"Cos", "[", 
               RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"], " ", 
             RowBox[{"Cot", "[", 
              RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], " ", 
             RowBox[{"Sin", "[", 
              RowBox[{"2", " ", "\[Degree]", " ", "\[Alpha]"}], "]"}]}], "+", 
            RowBox[{
             SqrtBox["2"], " ", 
             SuperscriptBox[
              RowBox[{"Csc", "[", 
               RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], "2"], " ", 
             RowBox[{"\[Sqrt]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"2", "+", 
                  RowBox[{"2", " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"2", " ", "\[Degree]", " ", "\[Alpha]"}], "]"}]}],
                   "+", 
                  RowBox[{"Cos", "[", 
                   RowBox[{"2", " ", "\[Degree]", " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Alpha]", "-", "\[Beta]"}], ")"}]}], "]"}], "-", 
                  RowBox[{"2", " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"2", " ", "\[Degree]", " ", "\[Beta]"}], "]"}]}], 
                  "+", 
                  RowBox[{"Cos", "[", 
                   RowBox[{"2", " ", "\[Degree]", " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Alpha]", "+", "\[Beta]"}], ")"}]}], "]"}], "-", 
                  RowBox[{"4", " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"2", " ", "\[Degree]", " ", "\[Theta]"}], 
                    "]"}]}]}], ")"}], " ", 
                SuperscriptBox[
                 RowBox[{"Sin", "[", 
                  RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"], " ", 
                SuperscriptBox[
                 RowBox[{"Sin", "[", 
                  RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], "2"]}], 
               ")"}]}]}]}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"4", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               SuperscriptBox[
                RowBox[{"Cos", "[", 
                 RowBox[{"\[Degree]", " ", "\[Alpha]"}], "]"}], "2"], " ", 
               SuperscriptBox[
                RowBox[{"Cos", "[", 
                 RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"]}], "+", 
              SuperscriptBox[
               RowBox[{"Sin", "[", 
                RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"]}], ")"}]}],
            ")"}]}], "]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", "0", ",", "180"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "180"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"Filling", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", "\[Rule]", 
        RowBox[{"{", "2", "}"}]}], "}"}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", ",", "0", ",", "90"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Beta]", ",", "0", ",", "360"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.497591969341507*^9, 3.4975920297969646`*^9}, {
   3.497592128934635*^9, 3.497592144366518*^9}, {3.497592178618477*^9, 
   3.497592181033615*^9}, {3.4975922314084964`*^9, 3.497592277465131*^9}, {
   3.497592526797392*^9, 3.4975925271364107`*^9}, {3.497592566427658*^9, 
   3.4975925756101837`*^9}, {3.497592912443449*^9, 3.497592938350931*^9}, {
   3.497593733184393*^9, 3.4975937853043737`*^9}, {3.4975938408065486`*^9, 
   3.497593844516761*^9}, 3.4975938815528793`*^9, {3.4975939124956493`*^9, 
   3.497593918827011*^9}, 3.497594180725991*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 90., $CellContext`\[Beta]$$ = 
    121.5, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`\[Alpha]$$], 0, 90}, {
      Hold[$CellContext`\[Beta]$$], 0, 360}}, Typeset`size$$ = {
    360., {106., 110.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$391090$$ = 
    0, $CellContext`\[Beta]$391091$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`\[Alpha]$$ = 0, $CellContext`\[Beta]$$ = 
        0}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$391090$$, 0], 
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$391091$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[{
         ArcCos[(-(
            Cos[$CellContext`\[Alpha]$$ Degree] 
             Cos[$CellContext`\[Beta]$$ Degree]^2 
             Cot[$CellContext`\[Theta] Degree] 
             Sin[$CellContext`\[Alpha]$$ Degree] + (1/2) 
             Csc[$CellContext`\[Theta] Degree]^2 
             Sqrt[(1 + 2 Cos[2 $CellContext`\[Alpha]$$ Degree] 
                 Cos[$CellContext`\[Beta]$$ Degree]^2 - Cos[
                2 $CellContext`\[Beta]$$ Degree] - 2 
                Cos[2 $CellContext`\[Theta] Degree]) 
               Sin[$CellContext`\[Beta]$$ Degree]^2 
               Sin[$CellContext`\[Theta] Degree]^2]))/(
          Cos[$CellContext`\[Alpha]$$ Degree]^2 
           Cos[$CellContext`\[Beta]$$ Degree]^2 + 
          Sin[$CellContext`\[Beta]$$ Degree]^2)], -
         ArcCos[((-2) Cos[Degree $CellContext`\[Beta]$$]^2 
             Cot[Degree $CellContext`\[Theta]] 
             Sin[2 Degree $CellContext`\[Alpha]$$] + 
            2^Rational[1, 2] Csc[Degree $CellContext`\[Theta]]^2 
             Sqrt[(2 + 2 Cos[2 Degree $CellContext`\[Alpha]$$] + 
                Cos[2 Degree ($CellContext`\[Alpha]$$ - \
$CellContext`\[Beta]$$)] - 2 Cos[2 Degree $CellContext`\[Beta]$$] + 
                Cos[2 Degree ($CellContext`\[Alpha]$$ + \
$CellContext`\[Beta]$$)] - 4 Cos[2 Degree $CellContext`\[Theta]]) 
               Sin[Degree $CellContext`\[Beta]$$]^2 
               Sin[Degree $CellContext`\[Theta]]^2])/(
           4 (Cos[Degree $CellContext`\[Alpha]$$]^2 
             Cos[Degree $CellContext`\[Beta]$$]^2 + 
            Sin[Degree $CellContext`\[Beta]$$]^2))]}, {$CellContext`\[Theta], 
         0, 180}, PlotRange -> {{0, 180}, {-Pi, Pi}}, Filling -> {1 -> {2}}], 
      "Specifications" :> {{$CellContext`\[Alpha]$$, 0, 
         90}, {$CellContext`\[Beta]$$, 0, 360}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{409., {166., 171.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.497592031270049*^9, 3.497592145710595*^9, 3.4975922904508734`*^9, 
   3.4975925278624525`*^9, {3.497592920047884*^9, 3.4975929390609713`*^9}, 
   3.4975937367575974`*^9, 3.497593845590822*^9, 3.4975938833549824`*^9, 
   3.497593920311096*^9, 3.497594182249078*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"ArcCos", "[", 
         RowBox[{
          RowBox[{"-", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Cos", "[", 
               RowBox[{"\[Alpha]", " ", "\[Degree]"}], "]"}], " ", 
              SuperscriptBox[
               RowBox[{"Cos", "[", 
                RowBox[{"\[Beta]", " ", "\[Degree]"}], "]"}], "2"], " ", 
              RowBox[{"Cot", "[", 
               RowBox[{"\[Theta]", " ", "\[Degree]"}], "]"}], " ", 
              RowBox[{"Sin", "[", 
               RowBox[{"\[Alpha]", " ", "\[Degree]"}], "]"}]}], "+", 
             RowBox[{
              FractionBox["1", "2"], " ", 
              SuperscriptBox[
               RowBox[{"Csc", "[", 
                RowBox[{"\[Theta]", " ", "\[Degree]"}], "]"}], "2"], " ", 
              RowBox[{"\[Sqrt]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "+", 
                   RowBox[{"2", " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"2", " ", "\[Alpha]", " ", "\[Degree]"}], " ", 
                    "]"}], " ", 
                    SuperscriptBox[
                    RowBox[{"Cos", "[", 
                    RowBox[{"\[Beta]", " ", "\[Degree]"}], "]"}], "2"]}], "-", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"2", " ", "\[Beta]", " ", "\[Degree]"}], "]"}], 
                   "-", 
                   RowBox[{"2", " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"2", " ", "\[Theta]", " ", "\[Degree]"}], 
                    "]"}]}]}], ")"}], " ", 
                 SuperscriptBox[
                  RowBox[{"Sin", "[", 
                   RowBox[{"\[Beta]", " ", "\[Degree]"}], "]"}], "2"], " ", 
                 SuperscriptBox[
                  RowBox[{"Sin", "[", 
                   RowBox[{"\[Theta]", " ", "\[Degree]"}], "]"}], "2"]}], 
                ")"}]}]}]}], ")"}]}], "/", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             SuperscriptBox[
              RowBox[{"Cos", "[", 
               RowBox[{"\[Alpha]", " ", "\[Degree]"}], "]"}], "2"], " ", 
             SuperscriptBox[
              RowBox[{"Cos", "[", 
               RowBox[{"\[Beta]", " ", "\[Degree]"}], "]"}], "2"]}], "+", 
            SuperscriptBox[
             RowBox[{"Sin", "[", 
              RowBox[{"\[Beta]", " ", "\[Degree]"}], "]"}], "2"]}], ")"}]}], 
         "]"}], "+", 
        RowBox[{"ArcCos", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "2"}], " ", 
             SuperscriptBox[
              RowBox[{"Cos", "[", 
               RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"], " ", 
             RowBox[{"Cot", "[", 
              RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], " ", 
             RowBox[{"Sin", "[", 
              RowBox[{"2", " ", "\[Degree]", " ", "\[Alpha]"}], "]"}]}], "+", 
            RowBox[{
             SqrtBox["2"], " ", 
             SuperscriptBox[
              RowBox[{"Csc", "[", 
               RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], "2"], " ", 
             RowBox[{"\[Sqrt]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"2", "+", 
                  RowBox[{"2", " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"2", " ", "\[Degree]", " ", "\[Alpha]"}], "]"}]}],
                   "+", 
                  RowBox[{"Cos", "[", 
                   RowBox[{"2", " ", "\[Degree]", " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Alpha]", "-", "\[Beta]"}], ")"}]}], "]"}], "-", 
                  RowBox[{"2", " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"2", " ", "\[Degree]", " ", "\[Beta]"}], "]"}]}], 
                  "+", 
                  RowBox[{"Cos", "[", 
                   RowBox[{"2", " ", "\[Degree]", " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Alpha]", "+", "\[Beta]"}], ")"}]}], "]"}], "-", 
                  RowBox[{"4", " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"2", " ", "\[Degree]", " ", "\[Theta]"}], 
                    "]"}]}]}], ")"}], " ", 
                SuperscriptBox[
                 RowBox[{"Sin", "[", 
                  RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"], " ", 
                SuperscriptBox[
                 RowBox[{"Sin", "[", 
                  RowBox[{"\[Degree]", " ", "\[Theta]"}], "]"}], "2"]}], 
               ")"}]}]}]}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"4", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               SuperscriptBox[
                RowBox[{"Cos", "[", 
                 RowBox[{"\[Degree]", " ", "\[Alpha]"}], "]"}], "2"], " ", 
               SuperscriptBox[
                RowBox[{"Cos", "[", 
                 RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"]}], "+", 
              SuperscriptBox[
               RowBox[{"Sin", "[", 
                RowBox[{"\[Degree]", " ", "\[Beta]"}], "]"}], "2"]}], ")"}]}],
            ")"}]}], "]"}]}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{"2", "\[Pi]"}], ")"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", "0", ",", "180"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "180"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"Filling", "\[Rule]", "Bottom"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", ",", "0", ",", "90"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Beta]", ",", "0", ",", "360"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4975939645866284`*^9, 3.4975939949903674`*^9}, 
   3.4975940368057594`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 
    14.700000000000001`, $CellContext`\[Beta]$$ = 0., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`\[Alpha]$$], 0, 90}, {
      Hold[$CellContext`\[Beta]$$], 0, 360}}, Typeset`size$$ = {
    360., {115., 119.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$267255$$ = 
    0, $CellContext`\[Beta]$267256$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`\[Alpha]$$ = 0, $CellContext`\[Beta]$$ = 
        0}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$267255$$, 0], 
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$267256$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[(ArcCos[(-(
             Cos[$CellContext`\[Alpha]$$ Degree] 
              Cos[$CellContext`\[Beta]$$ Degree]^2 
              Cot[$CellContext`\[Theta] Degree] 
              Sin[$CellContext`\[Alpha]$$ Degree] + (1/2) 
              Csc[$CellContext`\[Theta] Degree]^2 
              Sqrt[(1 + 2 Cos[2 $CellContext`\[Alpha]$$ Degree] 
                  Cos[$CellContext`\[Beta]$$ Degree]^2 - Cos[
                 2 $CellContext`\[Beta]$$ Degree] - 2 
                 Cos[2 $CellContext`\[Theta] Degree]) 
                Sin[$CellContext`\[Beta]$$ Degree]^2 
                Sin[$CellContext`\[Theta] Degree]^2]))/(
           Cos[$CellContext`\[Alpha]$$ Degree]^2 
            Cos[$CellContext`\[Beta]$$ Degree]^2 + 
           Sin[$CellContext`\[Beta]$$ Degree]^2)] + 
         ArcCos[((-2) Cos[Degree $CellContext`\[Beta]$$]^2 
             Cot[Degree $CellContext`\[Theta]] 
             Sin[2 Degree $CellContext`\[Alpha]$$] + 
            2^Rational[1, 2] Csc[Degree $CellContext`\[Theta]]^2 
             Sqrt[(2 + 2 Cos[2 Degree $CellContext`\[Alpha]$$] + 
                Cos[2 Degree ($CellContext`\[Alpha]$$ - \
$CellContext`\[Beta]$$)] - 2 Cos[2 Degree $CellContext`\[Beta]$$] + 
                Cos[2 Degree ($CellContext`\[Alpha]$$ + \
$CellContext`\[Beta]$$)] - 4 Cos[2 Degree $CellContext`\[Theta]]) 
               Sin[Degree $CellContext`\[Beta]$$]^2 
               Sin[Degree $CellContext`\[Theta]]^2])/(
           4 (Cos[Degree $CellContext`\[Alpha]$$]^2 
             Cos[Degree $CellContext`\[Beta]$$]^2 + 
            Sin[Degree $CellContext`\[Beta]$$]^2))])/(2 
        Pi), {$CellContext`\[Theta], 0, 180}, PlotRange -> {{0, 180}, {0, 1}},
         Filling -> Bottom], 
      "Specifications" :> {{$CellContext`\[Alpha]$$, 0, 
         90}, {$CellContext`\[Beta]$$, 0, 360}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{409., {175., 180.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4975939961384335`*^9, 3.4975940377728148`*^9}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{607, 545},
WindowMargins->{{Automatic, 101}, {48, Automatic}},
FrontEndVersion->"7.0 for Microsoft Windows (64-bit) (February 18, 2009)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 105, 1, 83, "Title"],
Cell[675, 25, 557, 14, 52, "Input"],
Cell[CellGroupData[{
Cell[1257, 43, 472, 13, 31, "Input"],
Cell[1732, 58, 664, 12, 56, "Message"],
Cell[2399, 72, 606, 19, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3042, 96, 485, 13, 45, "Input"],
Cell[3530, 111, 85514, 1400, 332, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89081, 1516, 480, 14, 47, "Input"],
Cell[89564, 1532, 120, 2, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89721, 1539, 833, 23, 72, "Input"],
Cell[90557, 1564, 1747, 35, 338, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92341, 1604, 964, 27, 92, "Input"],
Cell[93308, 1633, 1749, 35, 344, "Output"]
}, Open  ]],
Cell[95072, 1671, 890, 23, 72, "Input"],
Cell[CellGroupData[{
Cell[95987, 1698, 1466, 42, 137, "Input"],
Cell[97456, 1742, 2410, 48, 462, "Output"],
Cell[99869, 1792, 580, 11, 40, "Message"],
Cell[100452, 1805, 580, 11, 40, "Message"],
Cell[101035, 1818, 611, 11, 21, "Message"],
Cell[101649, 1831, 578, 11, 40, "Message"],
Cell[102230, 1844, 629, 11, 21, "Message"],
Cell[102862, 1857, 619, 11, 21, "Message"],
Cell[103484, 1870, 461, 9, 21, "Message"]
}, Open  ]],
Cell[103960, 1882, 753, 20, 72, "Input"],
Cell[CellGroupData[{
Cell[104738, 1906, 1103, 29, 52, "Input"],
Cell[105844, 1937, 740, 13, 56, "Message"],
Cell[106587, 1952, 10890, 274, 404, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117514, 2231, 6600, 158, 422, "Input"],
Cell[124117, 2391, 3726, 70, 354, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127880, 2466, 6123, 150, 434, "Input"],
Cell[134006, 2618, 3542, 68, 372, "Output"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
